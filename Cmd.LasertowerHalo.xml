<?xml version="1.0" standalone="yes" ?>
<?xml-stylesheet href="x2script.xsl" type="text/xsl" ?>
<script>
<name>Cmd.LasertowerHalo</name>
<version>2</version>
<engineversion>54</engineversion>
<description>Creates a ring of lasertowers about the user's current position, inheriting the user's current orientation</description>
<arguments>
<argument index="1" name="quantityLasertowers" type="Number" desc="number of lasertowers" />
<argument index="2" name="specifiedHaloPosition" type="Var/Sector Position" desc="Position of Rings" />
<argument index="3" name="specifiedOrientationVector" type="Var/Sector Position" desc="Aim the rings at this point" />
</arguments>
<sourceplaintext>
<![CDATA[
  * ************************************************
  * SCRIPT NAME: Lasertower Halo
  * DESCRIPTION: Creates multiple rings of lasertowers about a given position and orientation
  * 
  * AUTHOR: Attheveryend           DATE: 25 August 2020
  * ************************************************
  * variable declarations
  
  * we will need to know what sector to deploy our halo array to.  the 4th element of the 
  * sector position array is the chosen sector.
  $targetSector = $specifiedHaloPosition[3]
  * lets get some vars for our lasertower ship and ware
  $lasertowerShip = Lasertower
  $lasertowerWare = Lasertower
  * when we finally create lasertowers in the universe, the var to hold a reference to each laser obj
  * will be:
  $lazor = null
  * the radius of the halo will be
  $haloRadius = 0
  * the number of rings I shall need to make will be:
  $nRings = null
  * the number of lasertowers I will sort into each ring shall be:
  $lasertowersPerRing = null
  * in case the $quantityLasertowers is not divisible by $nRings, we'll keep track of the extra LTs here:
  $excessLasertowers = null
  * the angle between each lasertower in a ring will be:
  * also recall that there are 65536 degrees in a circle
  $lasertowerAngularDisplacement = null
  * the vector parallel to the ring axis shall be:
  $lasertowerAxisX = null
  $lasertowerAxisY = null
  $lasertowerAxisZ = null
  * this variable is used in computing the length of the lasertower axis vector:
  $lasertowerAxisLengthRadicand = null
  * let the length of the lasertower axis vector be:
  $lasertowerAxisLength = null
  * the elements of $specifiedHaloPosition array shall be
  $haloCenterX = $specifiedHaloPosition[0]
  $haloCenterY = $specifiedHaloPosition[1]
  $haloCenterZ = $specifiedHaloPosition[2]
  * the elements of the $specifiedOrientationVector array shall be
  $haloOrientationX = $specifiedOrientationVector[0]
  $haloOrientationY = $specifiedOrientationVector[1]
  $haloOrientationZ = $specifiedOrientationVector[2]
  * let the first lasertower point, which will be used to generate all the other lasertower positions be:
  $initialLasertowerPointX = 0
  $initialLasertowerPointY = 0
  $initialLasertowerPointZ = 0
  * I will need position arrays for working with the built in distance function.
  $originPositionArray = array alloc: size=3
  $initialPositionArray = array alloc: size=3
  * the origin position array is just an array of zeroes
  $originPositionArray[0] = 0
  $originPositionArray[1] = 0
  $originPositionArray[2] = 0
  * the length of my initial point vector for use with normalizing it will be
  $initialPositionLength = 0
  * a vector needed to aid in the creation of a valid initial lasertower point is
  $falseAxisVectorX = 0
  $falseAxisVectorY = 0
  $falseAxisVectorZ = 0
  * let the rotation quaternion that generates the points of the lasertower ring, and its inverse be:
  * elements are in order: 0 = real, 1 = i, 2 = j, 3 = k
  $ringRotationQuaternion = array alloc: size=4
  $ringRotationQuaternionInverse = array alloc: size=4
  * we will need to embed the lasertower position coordinates into a size 4 quaternion array too so:
  $lasertowerPointQuaternion = array alloc: size=4
  * because we're not allowed to evaluate any math while assigning to an array element
  * we will need some vars to calculate each quaternion array element's value:
  $ringRotationQuaternionReal = null
  $ringRotationQuaternionI = null
  $ringRotationQuaternionJ = null
  $ringRotationQuaternionK = null
  $ringInverseRotationQuaternionReal = null
  $ringInverseRotationQuaternionI = null
  $ringInverseRotationQuaternionJ = null
  $ringInverseRotationQuaternionK = null
  * our quaternions need the sines and cosines of the lasertower half angle, and
  * that can't be evaluated in the same expression as the cosine and sine, so:
  $lasertowerDisplacementHalfAngle = null
  * likewise we will need some vars to hold the LT displacement half angle's sine and cosine
  $lasertowerHalfAngleCosine = null
  $lasertowerHalfAngleSine = null
  * let my lasertower X Y and Z coordinates be held in the arrays:
  $lasertowerX = array alloc: size=0
  $lasertowerY = array alloc: size=0
  $lasertowerZ = array alloc: size=0
  * for the purpose of working on individual elements of the lasertowerXYZ arrays:
  $lasertowerTempX = 0
  $lasertowerTempY = 0
  $lasertowerTempZ = 0
  $tempReal = 0
  $tempI = 0
  $tempJ = 0
  $tempK = 0
  * I need some loop counters
  $ringCount = 0
  $lasertowerCount = 0
  $averagePointCounter = 0
  $finalDisplacementCounter = 0
  $laserDeploymentCounter = 0
  * in a two dimensional loop, one needs a temporary var to store a compound array access number
  $arrayElement = 0
  * in order to shift our rings along our ring axis as we generate them, it will be handy to have some
  * vars to store the lasertower axis vector as a scalable offset.
  $lasertowerAxisOffsetX = 0
  $lasertowerAxisOffsetY = 0
  $lasertowerAxisOffsetZ = 0
  * let the average (i.e. center) point of our halo array be:
  $averageHaloPointX = 0
  $averageHaloPointY = 0
  $averageHaloPointZ = 0
  * Once we generate our set of lasertower position points, we will want to shift those points over
  * to their final resting position.  The vector to do that will be:
  $finalDisplacementVectorX = 0
  $finalDisplacementVectorY = 0
  $finalDisplacementVectorZ = 0
  
  * this script does the following, in order:
  *  
  
  
  
  
  
  * from the RoF script we know the lasertowers misbehave and bump each other if they are closer 
  * together than 110m.  While the RoF script solves this by running a script on each lasertower to 
  * recover their original position every few minutes, I would like to avoid additional overhead.
  * Therefore I will adhere to a minimum spacing of 125m, and create additional rings of 
  * lasertowers as needed to form a cylinder.
  
  $haloRadius = 3000
  * If I choose to only make rings of radius 3000m, then each ring can hold at most 150 lasertowers 
  * and still have that 125m spacing. Therefore the number of rings I will need to sort my lasertowers
  * into for a given $quantityLasertowers is
  $nRings = ( $quantityLasertowers - 1 ) / 150 + 1
  * This works because x3 scripts do integer division and outright truncate values at the decimal point.
  * the $quantityLasertowers - 1 ensures that if I ask for 150 towers, I still get one ring.
  
  * We can now calculate the number of lasertowers we will sort into each ring.  
  * even if there's only one ring we should still do this so we can unify the methods to get
  * the $lasertowerAngularDisplacement between different numbers of rings.
  $lasertowersPerRing = $quantityLasertowers / $nRings
  * again, integer divison, so there will be cases where 
  *    $nRings * $lasertowersPerRing < $quantityLasertowers
  * to account for this, we should calculate the excess lasertowers, which may be zero.
  $excessLasertowers = $quantityLasertowers mod $lasertowersPerRing
  * as for what to do with these excesss bois, there will only ever be < $nRings of them
  * I might just stick them in their own sad little ring in the end.  Or maybe not use them.
  
  * the angle between one lasertower and the next in each ring is then:
  $lasertowerAngularDisplacement = 65536 / $lasertowersPerRing
  * now we have our rotation angle.  Lets take this time to also calculate the half angle
  $lasertowerDisplacementHalfAngle = $lasertowerAngularDisplacement / 2
  * the next thing on the laundry list on our way to generating a circle of points is to find the 
  * lasertower axis.
  * to get the lasertower axis, I need only take the difference between the $specifiedHaloPosition vector 
  * and $specifiedOrientationVector.
  * since these are arrays, and the MSCI hates us for trying to assign array elements directly to other 
  * array's elements....I will need to do the subtraction element-wise.  Head minus tail:
  $lasertowerAxisX = $haloOrientationX - $haloCenterX
  $lasertowerAxisY = $haloOrientationY - $haloCenterY
  $lasertowerAxisZ = $haloOrientationZ - $haloCenterZ
  * with this axis vector I now have a vector normal to the plane of my intended ring of lasertowers.  
  * Now I can set about the task of using this normal vector to generate a set of points which will form
  * a ring parallell to my final ring.
  
  write to player logbook: printf: fmt='the number of rings  = %s and the angular displacement = %s', $nRings, $lasertowerAngularDisplacement, null, null, null
  
  * **************Quaternion Rotation*************************
  * a quaternion q is a rotation of angle th about unit vector U=<ux, uy, yz> if:
  *         q = cos(th/2) + ( ux*i + uy*j + uz*k)*sin(th/2)
  * our lasertowerAxis needs to be normalized to length 1 in order to become a suitable unit vector
  * to normalize it, i first need to know its current length via L = sqrt( x^2 + y^2 + z^2), and then
  * I can divide out the length from each element of the lasertower axis vector to normalize it.
  $lasertowerAxisLength = get distance: position array1=$specifiedHaloPosition  array2=$specifiedOrientationVector
  
  * we need some code to avoid some overflows from the lasertower axis vector being too big.
  * lets normalize the axis vector to be length 1000m
  $lasertowerAxisX = $lasertowerAxisX * 10000 / $lasertowerAxisLength
  $lasertowerAxisY = $lasertowerAxisY * 10000 / $lasertowerAxisLength
  $lasertowerAxisZ = $lasertowerAxisZ * 10000 / $lasertowerAxisLength
  
  $lasertowerAxisLength = 10000
  
  
  write to player logbook: printf: fmt='axis x= %s y= %s z= %s', $lasertowerAxisX, $lasertowerAxisY, $lasertowerAxisZ, null, null
  
  * so now the issue is:  how do we remember unit vectors whose elements are all values less than 
  * one, but we cannot remember values that are not integers????  
  * we'll need to make 1 = 10000000 or something.
  * actually no we can delay the use of values less than one by multiplying both sides of the
  * definition of the quaternion vector by the length of the lasertower axis vector.
  *        ||LTAxis||*q = ||LTAxis||*cos(th/2)  + (LTAx*i + LTAy*j + LTAz*k)*sin(th/2)
  * we can do this because the length is a scalar quanity, and it helps because now all the
  * numbers in the above equations are still integers.  
  * there will also be some tomfoolery regarding the cosines because 2PI = 65536 here. and
  * the fixedCos function gives results between -65536 and 65536.  So that'll be fun too.
  
  * lets calculate cos(th/2) and sin(th/2)
  $lasertowerHalfAngleCosine = fixed cos $lasertowerDisplacementHalfAngle
  $lasertowerHalfAngleSine = fixed sin $lasertowerDisplacementHalfAngle
  
  * as we assign this we still need to normalize our sines and cosines, so we divide by 65536
  $ringRotationQuaternionReal = $lasertowerAxisLength * $lasertowerHalfAngleCosine / 65536
  $ringRotationQuaternionI = $lasertowerAxisX * $lasertowerHalfAngleSine / 65536
  $ringRotationQuaternionJ = $lasertowerAxisY * $lasertowerHalfAngleSine / 65536
  $ringRotationQuaternionK = $lasertowerAxisZ * $lasertowerHalfAngleSine / 65536
  
  $ringRotationQuaternion[0] = $ringRotationQuaternionReal
  $ringRotationQuaternion[1] = $ringRotationQuaternionI
  $ringRotationQuaternion[2] = $ringRotationQuaternionJ
  $ringRotationQuaternion[3] = $ringRotationQuaternionK
  
  * we can now create the inverse of our rotation quaternion, which for our "unit" quaternion is simply
  * a change of sign on the imaginary vector elements
  $ringInverseRotationQuaternionReal = $ringRotationQuaternionReal
  $ringInverseRotationQuaternionI = - $ringRotationQuaternionI
  $ringInverseRotationQuaternionJ = - $ringRotationQuaternionJ
  $ringInverseRotationQuaternionK = - $ringRotationQuaternionK
  
  
  $ringRotationQuaternionInverse[0] = $ringInverseRotationQuaternionReal
  $ringRotationQuaternionInverse[1] = $ringInverseRotationQuaternionI
  $ringRotationQuaternionInverse[2] = $ringInverseRotationQuaternionJ
  $ringRotationQuaternionInverse[3] = $ringInverseRotationQuaternionK
  
  write to player logbook: printf: fmt='rot quaternion = %s and inverse is =%s', $ringRotationQuaternion, $ringRotationQuaternionInverse, null, null, null
  
  * it is time to set our lasertower axis offset vectors
  $lasertowerAxisOffsetX = 125 * $lasertowerAxisX / $lasertowerAxisLength
  $lasertowerAxisOffsetY = 125 * $lasertowerAxisY / $lasertowerAxisLength
  $lasertowerAxisOffsetZ = 125 * $lasertowerAxisZ / $lasertowerAxisLength
  
  * I need to generate the first point.  I need a point with perpendicular distance = halo radius
  * away from our lasertower axis relative to the origin.  The way we will achieve this is to 
  * construct a second vector by rearranging elements from our axis vector such that this
  * second vector is anything but parallel to the axis.  Then we will take the cross product
  * of that vector with the axis vector to generate a vector that is normal to our axis.
  * if we normalize that normal vector to length = halo radius, it will serve as a first point.
  
  * it seems I need to juggle a few different legths of lasertower axis vectors.  The rotation
  * quaternions do not like small axis vectors, and the initial point does not like long
  * axis vectors.  So here we shall make a copy of the axis and shorten it for use here.
  
  $lasertowerAxisXShortCopy = $lasertowerAxisX / 100
  $lasertowerAxisYShortCopy = $lasertowerAxisY / 100
  $lasertowerAxisZShortCopy = $lasertowerAxisZ / 100
  
  * the following scheme will work so long as our axis vector isn't length zero, which would be
  * an issue in other areas as well.
  $falseAxisVectorX = $lasertowerAxisZShortCopy
  $falseAxisVectorY = - $lasertowerAxisXShortCopy
  $falseAxisVectorZ = $lasertowerAxisYShortCopy
  
  $initialLasertowerPointX = $lasertowerAxisYShortCopy * $falseAxisVectorZ - $lasertowerAxisZShortCopy * $falseAxisVectorY
  $initialLasertowerPointY = $lasertowerAxisZShortCopy * $falseAxisVectorX - $lasertowerAxisXShortCopy * $falseAxisVectorZ
  $initialLasertowerPointZ = $lasertowerAxisXShortCopy * $falseAxisVectorY - $lasertowerAxisYShortCopy * $falseAxisVectorX
  
  $initialPositionArray[0] = $initialLasertowerPointX
  $initialPositionArray[1] = $initialLasertowerPointY
  $initialPositionArray[2] = $initialLasertowerPointZ
  
  
  $initialPositionLength = get distance: position array1=$originPositionArray  array2=$initialPositionArray
  
  
  $initialLasertowerPointX = $initialLasertowerPointX * $haloRadius / $initialPositionLength
  $initialLasertowerPointY = $initialLasertowerPointY * $haloRadius / $initialPositionLength
  $initialLasertowerPointZ = $initialLasertowerPointZ * $haloRadius / $initialPositionLength
  
  * we have our first point, lets add it to the lasertower point array
  append $initialLasertowerPointX to array $lasertowerX
  append $initialLasertowerPointY to array $lasertowerY
  append $initialLasertowerPointZ to array $lasertowerZ
  
  write to player logbook: printf: fmt='initial pont x = %s y=%s z = %s', $initialLasertowerPointX, $initialLasertowerPointY, $initialLasertowerPointZ, null, null
  
  * **************LOOOPABLE CONTENT YO***********************************
  * what I wouldn't give for a FOR loop.
  * I need a 2D loop.  One dimension for the number of rings I'm to build and one dimension
  * for the number of lasertowers in each ring.
  * the first time through I will build 1 ring about the given center position
  * the For the second ring I need to add an offset to each point in the direction of the lasertower
  * axis.  we can do that by adding a multiple of the lasertower axis vector to each point.
  * subsequent rings need increasingly greater offsets.
  * I need to figure out a way to center the offsets intelligently so that the whole halo array is centered
  * on the $specifiedHaloPosition
  
  
  * now lets embed our first lasertower point from which the rest of the ring will be generated
  $lasertowerPointQuaternion[0] = 0
  $lasertowerPointQuaternion[1] = $initialLasertowerPointX
  $lasertowerPointQuaternion[2] = $initialLasertowerPointY
  $lasertowerPointQuaternion[3] = $initialLasertowerPointZ
  
  * in this loop I want to generate the first ring's points.
  * lets initialize the lasertower counter.  Recall we already have one point, so start the count less one.
  $lasertowerCount = $lasertowersPerRing - 1
  while $lasertowerCount
    
  * in order to perform a quaternion rotation p' =  q*p*q^-1, first we have to modify the equation to
  * account for the $lasertowerAxisLength factor.  It then becomes:
  *         ||LTAxis||^2*p' = ||LTAxis||^2*q*p*q^-1 
  * so to recover p', the rotated point, we will need to divide out $lasertowerAxisLength^2 later.
  * We have a hamilton product script that takes two args q1 and q2, so we will need to perform our 
  * conjugation in two steps.  
@   $qConjugatePart1 = [THIS] -> call script Lib.Math.HamiltonProduct :  length 4 array quaternion=$ringRotationQuaternion  length 4 array quaternion=$lasertowerPointQuaternion
    
    $tempReal = $qConjugatePart1[0]
    $tempI = $qConjugatePart1[1]
    $tempJ = $qConjugatePart1[2]
    $tempK = $qConjugatePart1[3]
    
    $tempReal = $tempReal / $lasertowerAxisLength
    $tempI = $tempI / $lasertowerAxisLength
    $tempJ = $tempJ / $lasertowerAxisLength
    $tempK = $tempK / $lasertowerAxisLength
    
    $qConjugatePart1[0] = $tempReal
    $qConjugatePart1[1] = $tempI
    $qConjugatePart1[2] = $tempJ
    $qConjugatePart1[3] = $tempK
    
@   $qConjugatePart2 = [THIS] -> call script Lib.Math.HamiltonProduct :  length 4 array quaternion=$qConjugatePart1  length 4 array quaternion=$ringRotationQuaternionInverse
    
  * now that our conjugation op is complete, we can now divide out the axis length squared from each
  * point, which is equal to  the var $lasertowerAxisLengthRadicand.  
    $lasertowerTempX = $qConjugatePart2[1]
    $lasertowerTempX = $lasertowerTempX / $lasertowerAxisLength
    $lasertowerTempY = $qConjugatePart2[2]
    $lasertowerTempY = $lasertowerTempY / $lasertowerAxisLength
    $lasertowerTempZ = $qConjugatePart2[3]
    $lasertowerTempZ = $lasertowerTempZ / $lasertowerAxisLength
    
  * We have now generated one point. lets append our point to our point arrays
    append $lasertowerTempX to array $lasertowerX
    append $lasertowerTempY to array $lasertowerY
    append $lasertowerTempZ to array $lasertowerZ
    
  * and in preparation for the next loop operation, lets embed our new point into the point 
  * quaternion so that the next rotation will generate the next point instead of the same point.
    $lasertowerPointQuaternion[1] = $lasertowerTempX
    $lasertowerPointQuaternion[2] = $lasertowerTempY
    $lasertowerPointQuaternion[3] = $lasertowerTempZ
    
  * at this point we know we have created a point for one lasertower, so lets dec the counter
    dec $lasertowerCount = 
    
  end
  
  
  
  * now that we have the first ring, lets use this set of points to construct further rings via offsets.
  * we have one ring completed so lets set the ring count to one.
  * also, in the case that $nRings = 1, this loop will not execute, so no need for an IF wrapper.
  $ringCount = 1
  while $ringCount < $nRings
    
  * this is a two dimensional operation, so we will need a second loop.
  * since we're using this counter to access an array element, it must start with zero and always
  * be smaller than the array we're accessing
    $lasertowerCount = 0
    while $lasertowerCount < $lasertowersPerRing
      
      $arrayElement = $ringCount * $lasertowerCount
      
      $lasertowerTempX = $lasertowerX[$arrayElement]
      $lasertowerTempY = $lasertowerY[$arrayElement]
      $lasertowerTempZ = $lasertowerZ[$arrayElement]
      
      
      $lasertowerTempX = $lasertowerTempX + $lasertowerAxisOffsetX
      $lasertowerTempY = $lasertowerTempY + $lasertowerAxisOffsetY
      $lasertowerTempZ = $lasertowerTempZ + $lasertowerAxisOffsetZ
      
  * since this operation extends the array, the next time we increment the ring counter, we
  * can be sure that the array will be one multiple of lasertowersPerRing longer
      append $lasertowerTempX to array $lasertowerX
      append $lasertowerTempY to array $lasertowerY
      append $lasertowerTempZ to array $lasertowerZ
      
      
  * at this point we know we have created a point for one lasertower, so lets inc the counter
      inc $lasertowerCount = 
      
    end
    
  * at this point in the loop we know we have created one ring worth of points, so lets inc the counter
    inc $ringCount = 
    
  end
  
  * some things to know about our point arrays.  The rings are all in the same arrays, so to access a 
  * particular ring, we need to know the element ranges for each ring
  * first ring elements will be     [0, $lasertowersPerRing - 1]
  * second ring elements will be    [$lasertowersPerRing, 2*$lasertowersPerRing - 1]
  * third ring elements will be     [2*$lasertowersPerRing, 3*$lasertowersPerRing-1]
  * and so on
  
  * thus far we have generated our rings, but they are indexed off the point (0, 3000, 0), and are therefore
  * located somewhere near the origin of the sector.  We need to transpose the ring coordinates to be 
  * centered on the $specifiedHaloPosition
  * to do this we will find the average of all the points in our halo array, then take the vector difference
  * between that center and the $specifiedHaloPosition to get a transformation vector we can then
  * add to every point in the halo array.  That will give us our final list of points.
  
  
  * so lets find the average point in our halo array
  
  * the X Y and Z halo point arrays should all be the same length, so any one of them will do
  $haloPointArraySize = size of array $lasertowerX
  $averagePointCounter = 0
  while $averagePointCounter < $haloPointArraySize
    
    $lasertowerTempX = $lasertowerX[$averagePointCounter]
    $lasertowerTempY = $lasertowerY[$averagePointCounter]
    $lasertowerTempZ = $lasertowerZ[$averagePointCounter]
    
    $averageHaloPointX = $averageHaloPointX + $lasertowerTempX
    $averageHaloPointY = $averageHaloPointY + $lasertowerTempY
    $averageHaloPointZ = $averageHaloPointZ + $lasertowerTempZ
    
    inc $averagePointCounter = 
  end
  
  $averageHaloPointX = $averageHaloPointX / $haloPointArraySize
  $averageHaloPointY = $averageHaloPointY / $haloPointArraySize
  $averageHaloPointZ = $averageHaloPointZ / $haloPointArraySize
  
  * now that we have the center of the halo array, we can create our displacement vector.
  * head minus tail!
  
  $finalDisplacementVectorX = $haloCenterX - $averageHaloPointX
  $finalDisplacementVectorY = $haloCenterY - $averageHaloPointY
  $finalDisplacementVectorZ = $haloCenterZ - $averageHaloPointZ
  
  * now that we have our final displacement vector, we can add this value to each of the
  * points in our $lasertowerXYZ arrays to get the final positions.
  
  
  $finalDisplacementCounter = 0
  while $finalDisplacementCounter < $haloPointArraySize
    
    $lasertowerTempX = $lasertowerX[$finalDisplacementCounter]
    $lasertowerTempY = $lasertowerY[$finalDisplacementCounter]
    $lasertowerTempZ = $lasertowerZ[$finalDisplacementCounter]
    
    $lasertowerTempX = $finalDisplacementVectorX - $lasertowerTempX
    $lasertowerTempY = $finalDisplacementVectorY - $lasertowerTempY
    $lasertowerTempZ = $finalDisplacementVectorZ - $lasertowerTempZ
    
    $lasertowerX[$finalDisplacementCounter] = $lasertowerTempX
    $lasertowerY[$finalDisplacementCounter] = $lasertowerTempY
    $lasertowerZ[$finalDisplacementCounter] = $lasertowerTempZ
    
    inc $finalDisplacementCounter = 
  end
  
  
  * Lets deploy some friggen "lasers!"
  
  $laserDeploymentCounter = 0
  while $laserDeploymentCounter < $haloPointArraySize
    
    $lasertowerTempX = $lasertowerX[$laserDeploymentCounter]
    $lasertowerTempY = $lasertowerY[$laserDeploymentCounter]
    $lasertowerTempZ = $lasertowerZ[$laserDeploymentCounter]
    
    $lazor = create ship: type=$lasertowerShip owner=Player addto=$targetSector x=$lasertowerTempX y=$lasertowerTempY z=$lasertowerTempZ
    
@   = wait 1000 ms
    
    inc $laserDeploymentCounter = 
  end
  
  
  return null
]]>
</sourceplaintext>
<sourcetext>
<line indent=""><comment><text>*&#160;</text><var>************************************************</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>SCRIPT&#160;NAME:&#160;Lasertower&#160;Halo</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>DESCRIPTION:&#160;Creates&#160;multiple&#160;rings&#160;of&#160;lasertowers&#160;about&#160;a&#160;given&#160;position&#160;and&#160;orientation</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var></var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>AUTHOR:&#160;Attheveryend&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DATE:&#160;25&#160;August&#160;2020</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>************************************************</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>variable&#160;declarations</var></comment></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;will&#160;need&#160;to&#160;know&#160;what&#160;sector&#160;to&#160;deploy&#160;our&#160;halo&#160;array&#160;to.&#160;&#160;the&#160;4th&#160;element&#160;of&#160;the&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>sector&#160;position&#160;array&#160;is&#160;the&#160;chosen&#160;sector.</var></comment></line>
<line indent=""><var>$targetSector&#160;=&#160;</var><var>$specifiedHaloPosition</var><text>[</text><var>3</var><text>]</text></line>
<line indent=""><comment><text>*&#160;</text><var>lets&#160;get&#160;some&#160;vars&#160;for&#160;our&#160;lasertower&#160;ship&#160;and&#160;ware</var></comment></line>
<line indent=""><var>$lasertowerShip&#160;=&#160;</var><var>Lasertower</var></line>
<line indent=""><var>$lasertowerWare&#160;=&#160;</var><var>Lasertower</var></line>
<line indent=""><comment><text>*&#160;</text><var>when&#160;we&#160;finally&#160;create&#160;lasertowers&#160;in&#160;the&#160;universe,&#160;the&#160;var&#160;to&#160;hold&#160;a&#160;reference&#160;to&#160;each&#160;laser&#160;obj</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>will&#160;be:</var></comment></line>
<line indent=""><var>$lazor&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;radius&#160;of&#160;the&#160;halo&#160;will&#160;be</var></comment></line>
<line indent=""><var>$haloRadius&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;number&#160;of&#160;rings&#160;I&#160;shall&#160;need&#160;to&#160;make&#160;will&#160;be:</var></comment></line>
<line indent=""><var>$nRings&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;number&#160;of&#160;lasertowers&#160;I&#160;will&#160;sort&#160;into&#160;each&#160;ring&#160;shall&#160;be:</var></comment></line>
<line indent=""><var>$lasertowersPerRing&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>in&#160;case&#160;the&#160;$quantityLasertowers&#160;is&#160;not&#160;divisible&#160;by&#160;$nRings,&#160;we'll&#160;keep&#160;track&#160;of&#160;the&#160;extra&#160;LTs&#160;here:</var></comment></line>
<line indent=""><var>$excessLasertowers&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;angle&#160;between&#160;each&#160;lasertower&#160;in&#160;a&#160;ring&#160;will&#160;be:</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>also&#160;recall&#160;that&#160;there&#160;are&#160;65536&#160;degrees&#160;in&#160;a&#160;circle</var></comment></line>
<line indent=""><var>$lasertowerAngularDisplacement&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;vector&#160;parallel&#160;to&#160;the&#160;ring&#160;axis&#160;shall&#160;be:</var></comment></line>
<line indent=""><var>$lasertowerAxisX&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$lasertowerAxisY&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$lasertowerAxisZ&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>this&#160;variable&#160;is&#160;used&#160;in&#160;computing&#160;the&#160;length&#160;of&#160;the&#160;lasertower&#160;axis&#160;vector:</var></comment></line>
<line indent=""><var>$lasertowerAxisLengthRadicand&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>let&#160;the&#160;length&#160;of&#160;the&#160;lasertower&#160;axis&#160;vector&#160;be:</var></comment></line>
<line indent=""><var>$lasertowerAxisLength&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;elements&#160;of&#160;$specifiedHaloPosition&#160;array&#160;shall&#160;be</var></comment></line>
<line indent=""><var>$haloCenterX&#160;=&#160;</var><var>$specifiedHaloPosition</var><text>[</text><var>0</var><text>]</text></line>
<line indent=""><var>$haloCenterY&#160;=&#160;</var><var>$specifiedHaloPosition</var><text>[</text><var>1</var><text>]</text></line>
<line indent=""><var>$haloCenterZ&#160;=&#160;</var><var>$specifiedHaloPosition</var><text>[</text><var>2</var><text>]</text></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;elements&#160;of&#160;the&#160;$specifiedOrientationVector&#160;array&#160;shall&#160;be</var></comment></line>
<line indent=""><var>$haloOrientationX&#160;=&#160;</var><var>$specifiedOrientationVector</var><text>[</text><var>0</var><text>]</text></line>
<line indent=""><var>$haloOrientationY&#160;=&#160;</var><var>$specifiedOrientationVector</var><text>[</text><var>1</var><text>]</text></line>
<line indent=""><var>$haloOrientationZ&#160;=&#160;</var><var>$specifiedOrientationVector</var><text>[</text><var>2</var><text>]</text></line>
<line indent=""><comment><text>*&#160;</text><var>let&#160;the&#160;first&#160;lasertower&#160;point,&#160;which&#160;will&#160;be&#160;used&#160;to&#160;generate&#160;all&#160;the&#160;other&#160;lasertower&#160;positions&#160;be:</var></comment></line>
<line indent=""><var>$initialLasertowerPointX&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$initialLasertowerPointY&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$initialLasertowerPointZ&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>I&#160;will&#160;need&#160;position&#160;arrays&#160;for&#160;working&#160;with&#160;the&#160;built&#160;in&#160;distance&#160;function.</var></comment></line>
<line indent=""><var>$originPositionArray&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>3</var></line>
<line indent=""><var>$initialPositionArray&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>3</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;origin&#160;position&#160;array&#160;is&#160;just&#160;an&#160;array&#160;of&#160;zeroes</var></comment></line>
<line indent=""><var>$originPositionArray</var><text>[</text><var>0</var><text>]&#160;=&#160;</text><var>0</var></line>
<line indent=""><var>$originPositionArray</var><text>[</text><var>1</var><text>]&#160;=&#160;</text><var>0</var></line>
<line indent=""><var>$originPositionArray</var><text>[</text><var>2</var><text>]&#160;=&#160;</text><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;length&#160;of&#160;my&#160;initial&#160;point&#160;vector&#160;for&#160;use&#160;with&#160;normalizing&#160;it&#160;will&#160;be</var></comment></line>
<line indent=""><var>$initialPositionLength&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>a&#160;vector&#160;needed&#160;to&#160;aid&#160;in&#160;the&#160;creation&#160;of&#160;a&#160;valid&#160;initial&#160;lasertower&#160;point&#160;is</var></comment></line>
<line indent=""><var>$falseAxisVectorX&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$falseAxisVectorY&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$falseAxisVectorZ&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>let&#160;the&#160;rotation&#160;quaternion&#160;that&#160;generates&#160;the&#160;points&#160;of&#160;the&#160;lasertower&#160;ring,&#160;and&#160;its&#160;inverse&#160;be:</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>elements&#160;are&#160;in&#160;order:&#160;0&#160;=&#160;real,&#160;1&#160;=&#160;i,&#160;2&#160;=&#160;j,&#160;3&#160;=&#160;k</var></comment></line>
<line indent=""><var>$ringRotationQuaternion&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>4</var></line>
<line indent=""><var>$ringRotationQuaternionInverse&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>4</var></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;will&#160;need&#160;to&#160;embed&#160;the&#160;lasertower&#160;position&#160;coordinates&#160;into&#160;a&#160;size&#160;4&#160;quaternion&#160;array&#160;too&#160;so:</var></comment></line>
<line indent=""><var>$lasertowerPointQuaternion&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>4</var></line>
<line indent=""><comment><text>*&#160;</text><var>because&#160;we're&#160;not&#160;allowed&#160;to&#160;evaluate&#160;any&#160;math&#160;while&#160;assigning&#160;to&#160;an&#160;array&#160;element</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;will&#160;need&#160;some&#160;vars&#160;to&#160;calculate&#160;each&#160;quaternion&#160;array&#160;element's&#160;value:</var></comment></line>
<line indent=""><var>$ringRotationQuaternionReal&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$ringRotationQuaternionI&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$ringRotationQuaternionJ&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$ringRotationQuaternionK&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$ringInverseRotationQuaternionReal&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$ringInverseRotationQuaternionI&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$ringInverseRotationQuaternionJ&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$ringInverseRotationQuaternionK&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>our&#160;quaternions&#160;need&#160;the&#160;sines&#160;and&#160;cosines&#160;of&#160;the&#160;lasertower&#160;half&#160;angle,&#160;and</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>that&#160;can't&#160;be&#160;evaluated&#160;in&#160;the&#160;same&#160;expression&#160;as&#160;the&#160;cosine&#160;and&#160;sine,&#160;so:</var></comment></line>
<line indent=""><var>$lasertowerDisplacementHalfAngle&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>likewise&#160;we&#160;will&#160;need&#160;some&#160;vars&#160;to&#160;hold&#160;the&#160;LT&#160;displacement&#160;half&#160;angle's&#160;sine&#160;and&#160;cosine</var></comment></line>
<line indent=""><var>$lasertowerHalfAngleCosine&#160;=&#160;</var><var>null</var></line>
<line indent=""><var>$lasertowerHalfAngleSine&#160;=&#160;</var><var>null</var></line>
<line indent=""><comment><text>*&#160;</text><var>let&#160;my&#160;lasertower&#160;X&#160;Y&#160;and&#160;Z&#160;coordinates&#160;be&#160;held&#160;in&#160;the&#160;arrays:</var></comment></line>
<line indent=""><var>$lasertowerX&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>0</var></line>
<line indent=""><var>$lasertowerY&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>0</var></line>
<line indent=""><var>$lasertowerZ&#160;=&#160;</var><text>array&#160;alloc:&#160;size=</text><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>for&#160;the&#160;purpose&#160;of&#160;working&#160;on&#160;individual&#160;elements&#160;of&#160;the&#160;lasertowerXYZ&#160;arrays:</var></comment></line>
<line indent=""><var>$lasertowerTempX&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$lasertowerTempY&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$lasertowerTempZ&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$tempReal&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$tempI&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$tempJ&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$tempK&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>I&#160;need&#160;some&#160;loop&#160;counters</var></comment></line>
<line indent=""><var>$ringCount&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$lasertowerCount&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$averagePointCounter&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$finalDisplacementCounter&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$laserDeploymentCounter&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>in&#160;a&#160;two&#160;dimensional&#160;loop,&#160;one&#160;needs&#160;a&#160;temporary&#160;var&#160;to&#160;store&#160;a&#160;compound&#160;array&#160;access&#160;number</var></comment></line>
<line indent=""><var>$arrayElement&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>in&#160;order&#160;to&#160;shift&#160;our&#160;rings&#160;along&#160;our&#160;ring&#160;axis&#160;as&#160;we&#160;generate&#160;them,&#160;it&#160;will&#160;be&#160;handy&#160;to&#160;have&#160;some</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>vars&#160;to&#160;store&#160;the&#160;lasertower&#160;axis&#160;vector&#160;as&#160;a&#160;scalable&#160;offset.</var></comment></line>
<line indent=""><var>$lasertowerAxisOffsetX&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$lasertowerAxisOffsetY&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$lasertowerAxisOffsetZ&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>let&#160;the&#160;average&#160;(i.e.&#160;center)&#160;point&#160;of&#160;our&#160;halo&#160;array&#160;be:</var></comment></line>
<line indent=""><var>$averageHaloPointX&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$averageHaloPointY&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$averageHaloPointZ&#160;=&#160;</var><var>0</var></line>
<line indent=""><comment><text>*&#160;</text><var>Once&#160;we&#160;generate&#160;our&#160;set&#160;of&#160;lasertower&#160;position&#160;points,&#160;we&#160;will&#160;want&#160;to&#160;shift&#160;those&#160;points&#160;over</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>to&#160;their&#160;final&#160;resting&#160;position.&#160;&#160;The&#160;vector&#160;to&#160;do&#160;that&#160;will&#160;be:</var></comment></line>
<line indent=""><var>$finalDisplacementVectorX&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$finalDisplacementVectorY&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>$finalDisplacementVectorZ&#160;=&#160;</var><var>0</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>this&#160;script&#160;does&#160;the&#160;following,&#160;in&#160;order:</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>&#160;</var></comment></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>from&#160;the&#160;RoF&#160;script&#160;we&#160;know&#160;the&#160;lasertowers&#160;misbehave&#160;and&#160;bump&#160;each&#160;other&#160;if&#160;they&#160;are&#160;closer&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>together&#160;than&#160;110m.&#160;&#160;While&#160;the&#160;RoF&#160;script&#160;solves&#160;this&#160;by&#160;running&#160;a&#160;script&#160;on&#160;each&#160;lasertower&#160;to&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>recover&#160;their&#160;original&#160;position&#160;every&#160;few&#160;minutes,&#160;I&#160;would&#160;like&#160;to&#160;avoid&#160;additional&#160;overhead.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>Therefore&#160;I&#160;will&#160;adhere&#160;to&#160;a&#160;minimum&#160;spacing&#160;of&#160;125m,&#160;and&#160;create&#160;additional&#160;rings&#160;of&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>lasertowers&#160;as&#160;needed&#160;to&#160;form&#160;a&#160;cylinder.</var></comment></line>
<line indent=""></line>
<line indent=""><var>$haloRadius&#160;=&#160;</var><var>3000</var></line>
<line indent=""><comment><text>*&#160;</text><var>If&#160;I&#160;choose&#160;to&#160;only&#160;make&#160;rings&#160;of&#160;radius&#160;3000m,&#160;then&#160;each&#160;ring&#160;can&#160;hold&#160;at&#160;most&#160;150&#160;lasertowers&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>and&#160;still&#160;have&#160;that&#160;125m&#160;spacing.&#160;Therefore&#160;the&#160;number&#160;of&#160;rings&#160;I&#160;will&#160;need&#160;to&#160;sort&#160;my&#160;lasertowers</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>into&#160;for&#160;a&#160;given&#160;$quantityLasertowers&#160;is</var></comment></line>
<line indent=""><var>$nRings&#160;=&#160;</var><var>(</var><text>&#160;</text><var>$quantityLasertowers</var><text>&#160;</text><var>-</var><text>&#160;</text><var>1</var><text>&#160;</text><var>)</var><text>&#160;</text><var>/</var><text>&#160;</text><var>150</var><text>&#160;</text><var>+</var><text>&#160;</text><var>1</var></line>
<line indent=""><comment><text>*&#160;</text><var>This&#160;works&#160;because&#160;x3&#160;scripts&#160;do&#160;integer&#160;division&#160;and&#160;outright&#160;truncate&#160;values&#160;at&#160;the&#160;decimal&#160;point.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;$quantityLasertowers&#160;-&#160;1&#160;ensures&#160;that&#160;if&#160;I&#160;ask&#160;for&#160;150&#160;towers,&#160;I&#160;still&#160;get&#160;one&#160;ring.</var></comment></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>We&#160;can&#160;now&#160;calculate&#160;the&#160;number&#160;of&#160;lasertowers&#160;we&#160;will&#160;sort&#160;into&#160;each&#160;ring.&#160;&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>even&#160;if&#160;there's&#160;only&#160;one&#160;ring&#160;we&#160;should&#160;still&#160;do&#160;this&#160;so&#160;we&#160;can&#160;unify&#160;the&#160;methods&#160;to&#160;get</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;$lasertowerAngularDisplacement&#160;between&#160;different&#160;numbers&#160;of&#160;rings.</var></comment></line>
<line indent=""><var>$lasertowersPerRing&#160;=&#160;</var><var>$quantityLasertowers</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$nRings</var></line>
<line indent=""><comment><text>*&#160;</text><var>again,&#160;integer&#160;divison,&#160;so&#160;there&#160;will&#160;be&#160;cases&#160;where&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>&#160;&#160;&#160;$nRings&#160;*&#160;$lasertowersPerRing&#160;&lt;&#160;$quantityLasertowers</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>to&#160;account&#160;for&#160;this,&#160;we&#160;should&#160;calculate&#160;the&#160;excess&#160;lasertowers,&#160;which&#160;may&#160;be&#160;zero.</var></comment></line>
<line indent=""><var>$excessLasertowers&#160;=&#160;</var><var>$quantityLasertowers</var><text>&#160;</text><var>mod</var><text>&#160;</text><var>$lasertowersPerRing</var></line>
<line indent=""><comment><text>*&#160;</text><var>as&#160;for&#160;what&#160;to&#160;do&#160;with&#160;these&#160;excesss&#160;bois,&#160;there&#160;will&#160;only&#160;ever&#160;be&#160;&lt;&#160;$nRings&#160;of&#160;them</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>I&#160;might&#160;just&#160;stick&#160;them&#160;in&#160;their&#160;own&#160;sad&#160;little&#160;ring&#160;in&#160;the&#160;end.&#160;&#160;Or&#160;maybe&#160;not&#160;use&#160;them.</var></comment></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;angle&#160;between&#160;one&#160;lasertower&#160;and&#160;the&#160;next&#160;in&#160;each&#160;ring&#160;is&#160;then:</var></comment></line>
<line indent=""><var>$lasertowerAngularDisplacement&#160;=&#160;</var><var>65536</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowersPerRing</var></line>
<line indent=""><comment><text>*&#160;</text><var>now&#160;we&#160;have&#160;our&#160;rotation&#160;angle.&#160;&#160;Lets&#160;take&#160;this&#160;time&#160;to&#160;also&#160;calculate&#160;the&#160;half&#160;angle</var></comment></line>
<line indent=""><var>$lasertowerDisplacementHalfAngle&#160;=&#160;</var><var>$lasertowerAngularDisplacement</var><text>&#160;</text><var>/</var><text>&#160;</text><var>2</var></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;next&#160;thing&#160;on&#160;the&#160;laundry&#160;list&#160;on&#160;our&#160;way&#160;to&#160;generating&#160;a&#160;circle&#160;of&#160;points&#160;is&#160;to&#160;find&#160;the&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>lasertower&#160;axis.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>to&#160;get&#160;the&#160;lasertower&#160;axis,&#160;I&#160;need&#160;only&#160;take&#160;the&#160;difference&#160;between&#160;the&#160;$specifiedHaloPosition&#160;vector&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>and&#160;$specifiedOrientationVector.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>since&#160;these&#160;are&#160;arrays,&#160;and&#160;the&#160;MSCI&#160;hates&#160;us&#160;for&#160;trying&#160;to&#160;assign&#160;array&#160;elements&#160;directly&#160;to&#160;other&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>array's&#160;elements....I&#160;will&#160;need&#160;to&#160;do&#160;the&#160;subtraction&#160;element-wise.&#160;&#160;Head&#160;minus&#160;tail:</var></comment></line>
<line indent=""><var>$lasertowerAxisX&#160;=&#160;</var><var>$haloOrientationX</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$haloCenterX</var></line>
<line indent=""><var>$lasertowerAxisY&#160;=&#160;</var><var>$haloOrientationY</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$haloCenterY</var></line>
<line indent=""><var>$lasertowerAxisZ&#160;=&#160;</var><var>$haloOrientationZ</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$haloCenterZ</var></line>
<line indent=""><comment><text>*&#160;</text><var>with&#160;this&#160;axis&#160;vector&#160;I&#160;now&#160;have&#160;a&#160;vector&#160;normal&#160;to&#160;the&#160;plane&#160;of&#160;my&#160;intended&#160;ring&#160;of&#160;lasertowers.&#160;&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>Now&#160;I&#160;can&#160;set&#160;about&#160;the&#160;task&#160;of&#160;using&#160;this&#160;normal&#160;vector&#160;to&#160;generate&#160;a&#160;set&#160;of&#160;points&#160;which&#160;will&#160;form</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>a&#160;ring&#160;parallell&#160;to&#160;my&#160;final&#160;ring.</var></comment></line>
<line indent=""></line>
<line indent=""><text>write&#160;to&#160;player&#160;logbook:&#160;printf:&#160;fmt=</text><var>'the&#160;number&#160;of&#160;rings&#160;&#160;=&#160;%s&#160;and&#160;the&#160;angular&#160;displacement&#160;=&#160;%s'</var><text>,&#160;</text><var>$nRings</var><text>,&#160;</text><var>$lasertowerAngularDisplacement</var><text>,&#160;</text><var>null</var><text>,&#160;</text><var>null</var><text>,&#160;</text><var>null</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>**************Quaternion&#160;Rotation*************************</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>a&#160;quaternion&#160;q&#160;is&#160;a&#160;rotation&#160;of&#160;angle&#160;th&#160;about&#160;unit&#160;vector&#160;U=&lt;ux,&#160;uy,&#160;yz&gt;&#160;if:</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;q&#160;=&#160;cos(th/2)&#160;+&#160;(&#160;ux*i&#160;+&#160;uy*j&#160;+&#160;uz*k)*sin(th/2)</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>our&#160;lasertowerAxis&#160;needs&#160;to&#160;be&#160;normalized&#160;to&#160;length&#160;1&#160;in&#160;order&#160;to&#160;become&#160;a&#160;suitable&#160;unit&#160;vector</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>to&#160;normalize&#160;it,&#160;i&#160;first&#160;need&#160;to&#160;know&#160;its&#160;current&#160;length&#160;via&#160;L&#160;=&#160;sqrt(&#160;x^2&#160;+&#160;y^2&#160;+&#160;z^2),&#160;and&#160;then</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>I&#160;can&#160;divide&#160;out&#160;the&#160;length&#160;from&#160;each&#160;element&#160;of&#160;the&#160;lasertower&#160;axis&#160;vector&#160;to&#160;normalize&#160;it.</var></comment></line>
<line indent=""><var>$lasertowerAxisLength&#160;=&#160;</var><text>get&#160;distance:&#160;position&#160;array1=</text><var>$specifiedHaloPosition</var><text>&#160;&#160;array2=</text><var>$specifiedOrientationVector</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;need&#160;some&#160;code&#160;to&#160;avoid&#160;some&#160;overflows&#160;from&#160;the&#160;lasertower&#160;axis&#160;vector&#160;being&#160;too&#160;big.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>lets&#160;normalize&#160;the&#160;axis&#160;vector&#160;to&#160;be&#160;length&#160;1000m</var></comment></line>
<line indent=""><var>$lasertowerAxisX&#160;=&#160;</var><var>$lasertowerAxisX</var><text>&#160;</text><var>*</var><text>&#160;</text><var>10000</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent=""><var>$lasertowerAxisY&#160;=&#160;</var><var>$lasertowerAxisY</var><text>&#160;</text><var>*</var><text>&#160;</text><var>10000</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent=""><var>$lasertowerAxisZ&#160;=&#160;</var><var>$lasertowerAxisZ</var><text>&#160;</text><var>*</var><text>&#160;</text><var>10000</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent=""></line>
<line indent=""><var>$lasertowerAxisLength&#160;=&#160;</var><var>10000</var></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><text>write&#160;to&#160;player&#160;logbook:&#160;printf:&#160;fmt=</text><var>'axis&#160;x=&#160;%s&#160;y=&#160;%s&#160;z=&#160;%s'</var><text>,&#160;</text><var>$lasertowerAxisX</var><text>,&#160;</text><var>$lasertowerAxisY</var><text>,&#160;</text><var>$lasertowerAxisZ</var><text>,&#160;</text><var>null</var><text>,&#160;</text><var>null</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>so&#160;now&#160;the&#160;issue&#160;is:&#160;&#160;how&#160;do&#160;we&#160;remember&#160;unit&#160;vectors&#160;whose&#160;elements&#160;are&#160;all&#160;values&#160;less&#160;than&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>one,&#160;but&#160;we&#160;cannot&#160;remember&#160;values&#160;that&#160;are&#160;not&#160;integers????&#160;&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>we'll&#160;need&#160;to&#160;make&#160;1&#160;=&#160;10000000&#160;or&#160;something.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>actually&#160;no&#160;we&#160;can&#160;delay&#160;the&#160;use&#160;of&#160;values&#160;less&#160;than&#160;one&#160;by&#160;multiplying&#160;both&#160;sides&#160;of&#160;the</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>definition&#160;of&#160;the&#160;quaternion&#160;vector&#160;by&#160;the&#160;length&#160;of&#160;the&#160;lasertower&#160;axis&#160;vector.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>&#160;&#160;&#160;&#160;&#160;&#160;&#160;||LTAxis||*q&#160;=&#160;||LTAxis||*cos(th/2)&#160;&#160;+&#160;(LTAx*i&#160;+&#160;LTAy*j&#160;+&#160;LTAz*k)*sin(th/2)</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;can&#160;do&#160;this&#160;because&#160;the&#160;length&#160;is&#160;a&#160;scalar&#160;quanity,&#160;and&#160;it&#160;helps&#160;because&#160;now&#160;all&#160;the</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>numbers&#160;in&#160;the&#160;above&#160;equations&#160;are&#160;still&#160;integers.&#160;&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>there&#160;will&#160;also&#160;be&#160;some&#160;tomfoolery&#160;regarding&#160;the&#160;cosines&#160;because&#160;2PI&#160;=&#160;65536&#160;here.&#160;and</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;fixedCos&#160;function&#160;gives&#160;results&#160;between&#160;-65536&#160;and&#160;65536.&#160;&#160;So&#160;that'll&#160;be&#160;fun&#160;too.</var></comment></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>lets&#160;calculate&#160;cos(th/2)&#160;and&#160;sin(th/2)</var></comment></line>
<line indent=""><var>$lasertowerHalfAngleCosine&#160;=&#160;</var><text>fixed&#160;cos&#160;</text><var>$lasertowerDisplacementHalfAngle</var></line>
<line indent=""><var>$lasertowerHalfAngleSine&#160;=&#160;</var><text>fixed&#160;sin&#160;</text><var>$lasertowerDisplacementHalfAngle</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>as&#160;we&#160;assign&#160;this&#160;we&#160;still&#160;need&#160;to&#160;normalize&#160;our&#160;sines&#160;and&#160;cosines,&#160;so&#160;we&#160;divide&#160;by&#160;65536</var></comment></line>
<line indent=""><var>$ringRotationQuaternionReal&#160;=&#160;</var><var>$lasertowerAxisLength</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerHalfAngleCosine</var><text>&#160;</text><var>/</var><text>&#160;</text><var>65536</var></line>
<line indent=""><var>$ringRotationQuaternionI&#160;=&#160;</var><var>$lasertowerAxisX</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerHalfAngleSine</var><text>&#160;</text><var>/</var><text>&#160;</text><var>65536</var></line>
<line indent=""><var>$ringRotationQuaternionJ&#160;=&#160;</var><var>$lasertowerAxisY</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerHalfAngleSine</var><text>&#160;</text><var>/</var><text>&#160;</text><var>65536</var></line>
<line indent=""><var>$ringRotationQuaternionK&#160;=&#160;</var><var>$lasertowerAxisZ</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerHalfAngleSine</var><text>&#160;</text><var>/</var><text>&#160;</text><var>65536</var></line>
<line indent=""></line>
<line indent=""><var>$ringRotationQuaternion</var><text>[</text><var>0</var><text>]&#160;=&#160;</text><var>$ringRotationQuaternionReal</var></line>
<line indent=""><var>$ringRotationQuaternion</var><text>[</text><var>1</var><text>]&#160;=&#160;</text><var>$ringRotationQuaternionI</var></line>
<line indent=""><var>$ringRotationQuaternion</var><text>[</text><var>2</var><text>]&#160;=&#160;</text><var>$ringRotationQuaternionJ</var></line>
<line indent=""><var>$ringRotationQuaternion</var><text>[</text><var>3</var><text>]&#160;=&#160;</text><var>$ringRotationQuaternionK</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;can&#160;now&#160;create&#160;the&#160;inverse&#160;of&#160;our&#160;rotation&#160;quaternion,&#160;which&#160;for&#160;our&#160;&quot;unit&quot;&#160;quaternion&#160;is&#160;simply</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>a&#160;change&#160;of&#160;sign&#160;on&#160;the&#160;imaginary&#160;vector&#160;elements</var></comment></line>
<line indent=""><var>$ringInverseRotationQuaternionReal&#160;=&#160;</var><var>$ringRotationQuaternionReal</var></line>
<line indent=""><var>$ringInverseRotationQuaternionI&#160;=&#160;</var><var>-</var><text>&#160;</text><var>$ringRotationQuaternionI</var></line>
<line indent=""><var>$ringInverseRotationQuaternionJ&#160;=&#160;</var><var>-</var><text>&#160;</text><var>$ringRotationQuaternionJ</var></line>
<line indent=""><var>$ringInverseRotationQuaternionK&#160;=&#160;</var><var>-</var><text>&#160;</text><var>$ringRotationQuaternionK</var></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><var>$ringRotationQuaternionInverse</var><text>[</text><var>0</var><text>]&#160;=&#160;</text><var>$ringInverseRotationQuaternionReal</var></line>
<line indent=""><var>$ringRotationQuaternionInverse</var><text>[</text><var>1</var><text>]&#160;=&#160;</text><var>$ringInverseRotationQuaternionI</var></line>
<line indent=""><var>$ringRotationQuaternionInverse</var><text>[</text><var>2</var><text>]&#160;=&#160;</text><var>$ringInverseRotationQuaternionJ</var></line>
<line indent=""><var>$ringRotationQuaternionInverse</var><text>[</text><var>3</var><text>]&#160;=&#160;</text><var>$ringInverseRotationQuaternionK</var></line>
<line indent=""></line>
<line indent=""><text>write&#160;to&#160;player&#160;logbook:&#160;printf:&#160;fmt=</text><var>'rot&#160;quaternion&#160;=&#160;%s&#160;and&#160;inverse&#160;is&#160;=%s'</var><text>,&#160;</text><var>$ringRotationQuaternion</var><text>,&#160;</text><var>$ringRotationQuaternionInverse</var><text>,&#160;</text><var>null</var><text>,&#160;</text><var>null</var><text>,&#160;</text><var>null</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>it&#160;is&#160;time&#160;to&#160;set&#160;our&#160;lasertower&#160;axis&#160;offset&#160;vectors</var></comment></line>
<line indent=""><var>$lasertowerAxisOffsetX&#160;=&#160;</var><var>125</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerAxisX</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent=""><var>$lasertowerAxisOffsetY&#160;=&#160;</var><var>125</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerAxisY</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent=""><var>$lasertowerAxisOffsetZ&#160;=&#160;</var><var>125</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerAxisZ</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>I&#160;need&#160;to&#160;generate&#160;the&#160;first&#160;point.&#160;&#160;I&#160;need&#160;a&#160;point&#160;with&#160;perpendicular&#160;distance&#160;=&#160;halo&#160;radius</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>away&#160;from&#160;our&#160;lasertower&#160;axis&#160;relative&#160;to&#160;the&#160;origin.&#160;&#160;The&#160;way&#160;we&#160;will&#160;achieve&#160;this&#160;is&#160;to&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>construct&#160;a&#160;second&#160;vector&#160;by&#160;rearranging&#160;elements&#160;from&#160;our&#160;axis&#160;vector&#160;such&#160;that&#160;this</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>second&#160;vector&#160;is&#160;anything&#160;but&#160;parallel&#160;to&#160;the&#160;axis.&#160;&#160;Then&#160;we&#160;will&#160;take&#160;the&#160;cross&#160;product</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>of&#160;that&#160;vector&#160;with&#160;the&#160;axis&#160;vector&#160;to&#160;generate&#160;a&#160;vector&#160;that&#160;is&#160;normal&#160;to&#160;our&#160;axis.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>if&#160;we&#160;normalize&#160;that&#160;normal&#160;vector&#160;to&#160;length&#160;=&#160;halo&#160;radius,&#160;it&#160;will&#160;serve&#160;as&#160;a&#160;first&#160;point.</var></comment></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>it&#160;seems&#160;I&#160;need&#160;to&#160;juggle&#160;a&#160;few&#160;different&#160;legths&#160;of&#160;lasertower&#160;axis&#160;vectors.&#160;&#160;The&#160;rotation</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>quaternions&#160;do&#160;not&#160;like&#160;small&#160;axis&#160;vectors,&#160;and&#160;the&#160;initial&#160;point&#160;does&#160;not&#160;like&#160;long</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>axis&#160;vectors.&#160;&#160;So&#160;here&#160;we&#160;shall&#160;make&#160;a&#160;copy&#160;of&#160;the&#160;axis&#160;and&#160;shorten&#160;it&#160;for&#160;use&#160;here.</var></comment></line>
<line indent=""></line>
<line indent=""><var>$lasertowerAxisXShortCopy&#160;=&#160;</var><var>$lasertowerAxisX</var><text>&#160;</text><var>/</var><text>&#160;</text><var>100</var></line>
<line indent=""><var>$lasertowerAxisYShortCopy&#160;=&#160;</var><var>$lasertowerAxisY</var><text>&#160;</text><var>/</var><text>&#160;</text><var>100</var></line>
<line indent=""><var>$lasertowerAxisZShortCopy&#160;=&#160;</var><var>$lasertowerAxisZ</var><text>&#160;</text><var>/</var><text>&#160;</text><var>100</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;following&#160;scheme&#160;will&#160;work&#160;so&#160;long&#160;as&#160;our&#160;axis&#160;vector&#160;isn't&#160;length&#160;zero,&#160;which&#160;would&#160;be</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>an&#160;issue&#160;in&#160;other&#160;areas&#160;as&#160;well.</var></comment></line>
<line indent=""><var>$falseAxisVectorX&#160;=&#160;</var><var>$lasertowerAxisZShortCopy</var></line>
<line indent=""><var>$falseAxisVectorY&#160;=&#160;</var><var>-</var><text>&#160;</text><var>$lasertowerAxisXShortCopy</var></line>
<line indent=""><var>$falseAxisVectorZ&#160;=&#160;</var><var>$lasertowerAxisYShortCopy</var></line>
<line indent=""></line>
<line indent=""><var>$initialLasertowerPointX&#160;=&#160;</var><var>$lasertowerAxisYShortCopy</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$falseAxisVectorZ</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$lasertowerAxisZShortCopy</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$falseAxisVectorY</var></line>
<line indent=""><var>$initialLasertowerPointY&#160;=&#160;</var><var>$lasertowerAxisZShortCopy</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$falseAxisVectorX</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$lasertowerAxisXShortCopy</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$falseAxisVectorZ</var></line>
<line indent=""><var>$initialLasertowerPointZ&#160;=&#160;</var><var>$lasertowerAxisXShortCopy</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$falseAxisVectorY</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$lasertowerAxisYShortCopy</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$falseAxisVectorX</var></line>
<line indent=""></line>
<line indent=""><var>$initialPositionArray</var><text>[</text><var>0</var><text>]&#160;=&#160;</text><var>$initialLasertowerPointX</var></line>
<line indent=""><var>$initialPositionArray</var><text>[</text><var>1</var><text>]&#160;=&#160;</text><var>$initialLasertowerPointY</var></line>
<line indent=""><var>$initialPositionArray</var><text>[</text><var>2</var><text>]&#160;=&#160;</text><var>$initialLasertowerPointZ</var></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><var>$initialPositionLength&#160;=&#160;</var><text>get&#160;distance:&#160;position&#160;array1=</text><var>$originPositionArray</var><text>&#160;&#160;array2=</text><var>$initialPositionArray</var></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><var>$initialLasertowerPointX&#160;=&#160;</var><var>$initialLasertowerPointX</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$haloRadius</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$initialPositionLength</var></line>
<line indent=""><var>$initialLasertowerPointY&#160;=&#160;</var><var>$initialLasertowerPointY</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$haloRadius</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$initialPositionLength</var></line>
<line indent=""><var>$initialLasertowerPointZ&#160;=&#160;</var><var>$initialLasertowerPointZ</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$haloRadius</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$initialPositionLength</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;have&#160;our&#160;first&#160;point,&#160;lets&#160;add&#160;it&#160;to&#160;the&#160;lasertower&#160;point&#160;array</var></comment></line>
<line indent=""><text>append&#160;</text><var>$initialLasertowerPointX</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerX</var></line>
<line indent=""><text>append&#160;</text><var>$initialLasertowerPointY</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerY</var></line>
<line indent=""><text>append&#160;</text><var>$initialLasertowerPointZ</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerZ</var></line>
<line indent=""></line>
<line indent=""><text>write&#160;to&#160;player&#160;logbook:&#160;printf:&#160;fmt=</text><var>'initial&#160;pont&#160;x&#160;=&#160;%s&#160;y=%s&#160;z&#160;=&#160;%s'</var><text>,&#160;</text><var>$initialLasertowerPointX</var><text>,&#160;</text><var>$initialLasertowerPointY</var><text>,&#160;</text><var>$initialLasertowerPointZ</var><text>,&#160;</text><var>null</var><text>,&#160;</text><var>null</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>**************LOOOPABLE&#160;CONTENT&#160;YO***********************************</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>what&#160;I&#160;wouldn't&#160;give&#160;for&#160;a&#160;FOR&#160;loop.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>I&#160;need&#160;a&#160;2D&#160;loop.&#160;&#160;One&#160;dimension&#160;for&#160;the&#160;number&#160;of&#160;rings&#160;I'm&#160;to&#160;build&#160;and&#160;one&#160;dimension</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>for&#160;the&#160;number&#160;of&#160;lasertowers&#160;in&#160;each&#160;ring.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;first&#160;time&#160;through&#160;I&#160;will&#160;build&#160;1&#160;ring&#160;about&#160;the&#160;given&#160;center&#160;position</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;For&#160;the&#160;second&#160;ring&#160;I&#160;need&#160;to&#160;add&#160;an&#160;offset&#160;to&#160;each&#160;point&#160;in&#160;the&#160;direction&#160;of&#160;the&#160;lasertower</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>axis.&#160;&#160;we&#160;can&#160;do&#160;that&#160;by&#160;adding&#160;a&#160;multiple&#160;of&#160;the&#160;lasertower&#160;axis&#160;vector&#160;to&#160;each&#160;point.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>subsequent&#160;rings&#160;need&#160;increasingly&#160;greater&#160;offsets.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>I&#160;need&#160;to&#160;figure&#160;out&#160;a&#160;way&#160;to&#160;center&#160;the&#160;offsets&#160;intelligently&#160;so&#160;that&#160;the&#160;whole&#160;halo&#160;array&#160;is&#160;centered</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>on&#160;the&#160;$specifiedHaloPosition</var></comment></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>now&#160;lets&#160;embed&#160;our&#160;first&#160;lasertower&#160;point&#160;from&#160;which&#160;the&#160;rest&#160;of&#160;the&#160;ring&#160;will&#160;be&#160;generated</var></comment></line>
<line indent=""><var>$lasertowerPointQuaternion</var><text>[</text><var>0</var><text>]&#160;=&#160;</text><var>0</var></line>
<line indent=""><var>$lasertowerPointQuaternion</var><text>[</text><var>1</var><text>]&#160;=&#160;</text><var>$initialLasertowerPointX</var></line>
<line indent=""><var>$lasertowerPointQuaternion</var><text>[</text><var>2</var><text>]&#160;=&#160;</text><var>$initialLasertowerPointY</var></line>
<line indent=""><var>$lasertowerPointQuaternion</var><text>[</text><var>3</var><text>]&#160;=&#160;</text><var>$initialLasertowerPointZ</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>in&#160;this&#160;loop&#160;I&#160;want&#160;to&#160;generate&#160;the&#160;first&#160;ring's&#160;points.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>lets&#160;initialize&#160;the&#160;lasertower&#160;counter.&#160;&#160;Recall&#160;we&#160;already&#160;have&#160;one&#160;point,&#160;so&#160;start&#160;the&#160;count&#160;less&#160;one.</var></comment></line>
<line indent=""><var>$lasertowerCount&#160;=&#160;</var><var>$lasertowersPerRing</var><text>&#160;</text><var>-</var><text>&#160;</text><var>1</var></line>
<line indent=""><var>while&#160;</var><var>$lasertowerCount</var></line>
<line indent="&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>in&#160;order&#160;to&#160;perform&#160;a&#160;quaternion&#160;rotation&#160;p'&#160;=&#160;&#160;q*p*q^-1,&#160;first&#160;we&#160;have&#160;to&#160;modify&#160;the&#160;equation&#160;to</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>account&#160;for&#160;the&#160;$lasertowerAxisLength&#160;factor.&#160;&#160;It&#160;then&#160;becomes:</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;||LTAxis||^2*p'&#160;=&#160;||LTAxis||^2*q*p*q^-1&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>so&#160;to&#160;recover&#160;p',&#160;the&#160;rotated&#160;point,&#160;we&#160;will&#160;need&#160;to&#160;divide&#160;out&#160;$lasertowerAxisLength^2&#160;later.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>We&#160;have&#160;a&#160;hamilton&#160;product&#160;script&#160;that&#160;takes&#160;two&#160;args&#160;q1&#160;and&#160;q2,&#160;so&#160;we&#160;will&#160;need&#160;to&#160;perform&#160;our&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>conjugation&#160;in&#160;two&#160;steps.&#160;&#160;</var></comment></line>
<line interruptable="@" indent="&#160;"><var>$qConjugatePart1&#160;=&#160;</var><var>[THIS]&#160;-&gt;</var><text>&#160;call&#160;script&#160;</text><call>Lib.Math.HamiltonProduct</call><text>&#160;:&#160;</text><text>&#160;length&#160;4&#160;array&#160;quaternion=</text><var>$ringRotationQuaternion</var><text>&#160;</text><text>&#160;length&#160;4&#160;array&#160;quaternion=</text><var>$lasertowerPointQuaternion</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$tempReal&#160;=&#160;</var><var>$qConjugatePart1</var><text>[</text><var>0</var><text>]</text></line>
<line indent="&#160;"><var>$tempI&#160;=&#160;</var><var>$qConjugatePart1</var><text>[</text><var>1</var><text>]</text></line>
<line indent="&#160;"><var>$tempJ&#160;=&#160;</var><var>$qConjugatePart1</var><text>[</text><var>2</var><text>]</text></line>
<line indent="&#160;"><var>$tempK&#160;=&#160;</var><var>$qConjugatePart1</var><text>[</text><var>3</var><text>]</text></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$tempReal&#160;=&#160;</var><var>$tempReal</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent="&#160;"><var>$tempI&#160;=&#160;</var><var>$tempI</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent="&#160;"><var>$tempJ&#160;=&#160;</var><var>$tempJ</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent="&#160;"><var>$tempK&#160;=&#160;</var><var>$tempK</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$qConjugatePart1</var><text>[</text><var>0</var><text>]&#160;=&#160;</text><var>$tempReal</var></line>
<line indent="&#160;"><var>$qConjugatePart1</var><text>[</text><var>1</var><text>]&#160;=&#160;</text><var>$tempI</var></line>
<line indent="&#160;"><var>$qConjugatePart1</var><text>[</text><var>2</var><text>]&#160;=&#160;</text><var>$tempJ</var></line>
<line indent="&#160;"><var>$qConjugatePart1</var><text>[</text><var>3</var><text>]&#160;=&#160;</text><var>$tempK</var></line>
<line indent="&#160;"></line>
<line interruptable="@" indent="&#160;"><var>$qConjugatePart2&#160;=&#160;</var><var>[THIS]&#160;-&gt;</var><text>&#160;call&#160;script&#160;</text><call>Lib.Math.HamiltonProduct</call><text>&#160;:&#160;</text><text>&#160;length&#160;4&#160;array&#160;quaternion=</text><var>$qConjugatePart1</var><text>&#160;</text><text>&#160;length&#160;4&#160;array&#160;quaternion=</text><var>$ringRotationQuaternionInverse</var></line>
<line indent="&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>now&#160;that&#160;our&#160;conjugation&#160;op&#160;is&#160;complete,&#160;we&#160;can&#160;now&#160;divide&#160;out&#160;the&#160;axis&#160;length&#160;squared&#160;from&#160;each</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>point,&#160;which&#160;is&#160;equal&#160;to&#160;&#160;the&#160;var&#160;$lasertowerAxisLengthRadicand.&#160;&#160;</var></comment></line>
<line indent="&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$qConjugatePart2</var><text>[</text><var>1</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$lasertowerTempX</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent="&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$qConjugatePart2</var><text>[</text><var>2</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$lasertowerTempY</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent="&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$qConjugatePart2</var><text>[</text><var>3</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$lasertowerTempZ</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$lasertowerAxisLength</var></line>
<line indent="&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>We&#160;have&#160;now&#160;generated&#160;one&#160;point.&#160;lets&#160;append&#160;our&#160;point&#160;to&#160;our&#160;point&#160;arrays</var></comment></line>
<line indent="&#160;"><text>append&#160;</text><var>$lasertowerTempX</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerX</var></line>
<line indent="&#160;"><text>append&#160;</text><var>$lasertowerTempY</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerY</var></line>
<line indent="&#160;"><text>append&#160;</text><var>$lasertowerTempZ</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerZ</var></line>
<line indent="&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>and&#160;in&#160;preparation&#160;for&#160;the&#160;next&#160;loop&#160;operation,&#160;lets&#160;embed&#160;our&#160;new&#160;point&#160;into&#160;the&#160;point&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>quaternion&#160;so&#160;that&#160;the&#160;next&#160;rotation&#160;will&#160;generate&#160;the&#160;next&#160;point&#160;instead&#160;of&#160;the&#160;same&#160;point.</var></comment></line>
<line indent="&#160;"><var>$lasertowerPointQuaternion</var><text>[</text><var>1</var><text>]&#160;=&#160;</text><var>$lasertowerTempX</var></line>
<line indent="&#160;"><var>$lasertowerPointQuaternion</var><text>[</text><var>2</var><text>]&#160;=&#160;</text><var>$lasertowerTempY</var></line>
<line indent="&#160;"><var>$lasertowerPointQuaternion</var><text>[</text><var>3</var><text>]&#160;=&#160;</text><var>$lasertowerTempZ</var></line>
<line indent="&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>at&#160;this&#160;point&#160;we&#160;know&#160;we&#160;have&#160;created&#160;a&#160;point&#160;for&#160;one&#160;lasertower,&#160;so&#160;lets&#160;dec&#160;the&#160;counter</var></comment></line>
<line indent="&#160;"><text>dec&#160;</text><var>$lasertowerCount&#160;=&#160;</var></line>
<line indent="&#160;"></line>
<line indent=""><text>end</text></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>now&#160;that&#160;we&#160;have&#160;the&#160;first&#160;ring,&#160;lets&#160;use&#160;this&#160;set&#160;of&#160;points&#160;to&#160;construct&#160;further&#160;rings&#160;via&#160;offsets.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>we&#160;have&#160;one&#160;ring&#160;completed&#160;so&#160;lets&#160;set&#160;the&#160;ring&#160;count&#160;to&#160;one.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>also,&#160;in&#160;the&#160;case&#160;that&#160;$nRings&#160;=&#160;1,&#160;this&#160;loop&#160;will&#160;not&#160;execute,&#160;so&#160;no&#160;need&#160;for&#160;an&#160;IF&#160;wrapper.</var></comment></line>
<line indent=""><var>$ringCount&#160;=&#160;</var><var>1</var></line>
<line indent=""><var>while&#160;</var><var>$ringCount</var><text>&#160;</text><var>&lt;</var><text>&#160;</text><var>$nRings</var></line>
<line indent="&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>this&#160;is&#160;a&#160;two&#160;dimensional&#160;operation,&#160;so&#160;we&#160;will&#160;need&#160;a&#160;second&#160;loop.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>since&#160;we're&#160;using&#160;this&#160;counter&#160;to&#160;access&#160;an&#160;array&#160;element,&#160;it&#160;must&#160;start&#160;with&#160;zero&#160;and&#160;always</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>be&#160;smaller&#160;than&#160;the&#160;array&#160;we're&#160;accessing</var></comment></line>
<line indent="&#160;"><var>$lasertowerCount&#160;=&#160;</var><var>0</var></line>
<line indent="&#160;"><var>while&#160;</var><var>$lasertowerCount</var><text>&#160;</text><var>&lt;</var><text>&#160;</text><var>$lasertowersPerRing</var></line>
<line indent="&#160;&#160;"></line>
<line indent="&#160;&#160;"><var>$arrayElement&#160;=&#160;</var><var>$ringCount</var><text>&#160;</text><var>*</var><text>&#160;</text><var>$lasertowerCount</var></line>
<line indent="&#160;&#160;"></line>
<line indent="&#160;&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$lasertowerX</var><text>[</text><var>$arrayElement</var><text>]</text></line>
<line indent="&#160;&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$lasertowerY</var><text>[</text><var>$arrayElement</var><text>]</text></line>
<line indent="&#160;&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$lasertowerZ</var><text>[</text><var>$arrayElement</var><text>]</text></line>
<line indent="&#160;&#160;"></line>
<line indent="&#160;&#160;"></line>
<line indent="&#160;&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$lasertowerTempX</var><text>&#160;</text><var>+</var><text>&#160;</text><var>$lasertowerAxisOffsetX</var></line>
<line indent="&#160;&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$lasertowerTempY</var><text>&#160;</text><var>+</var><text>&#160;</text><var>$lasertowerAxisOffsetY</var></line>
<line indent="&#160;&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$lasertowerTempZ</var><text>&#160;</text><var>+</var><text>&#160;</text><var>$lasertowerAxisOffsetZ</var></line>
<line indent="&#160;&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>since&#160;this&#160;operation&#160;extends&#160;the&#160;array,&#160;the&#160;next&#160;time&#160;we&#160;increment&#160;the&#160;ring&#160;counter,&#160;we</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>can&#160;be&#160;sure&#160;that&#160;the&#160;array&#160;will&#160;be&#160;one&#160;multiple&#160;of&#160;lasertowersPerRing&#160;longer</var></comment></line>
<line indent="&#160;&#160;"><text>append&#160;</text><var>$lasertowerTempX</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerX</var></line>
<line indent="&#160;&#160;"><text>append&#160;</text><var>$lasertowerTempY</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerY</var></line>
<line indent="&#160;&#160;"><text>append&#160;</text><var>$lasertowerTempZ</var><text>&#160;to&#160;array&#160;</text><var>$lasertowerZ</var></line>
<line indent="&#160;&#160;"></line>
<line indent="&#160;&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>at&#160;this&#160;point&#160;we&#160;know&#160;we&#160;have&#160;created&#160;a&#160;point&#160;for&#160;one&#160;lasertower,&#160;so&#160;lets&#160;inc&#160;the&#160;counter</var></comment></line>
<line indent="&#160;&#160;"><text>inc&#160;</text><var>$lasertowerCount&#160;=&#160;</var></line>
<line indent="&#160;&#160;"></line>
<line indent="&#160;"><text>end</text></line>
<line indent="&#160;"></line>
<line indent=""><comment><text>*&#160;</text><var>at&#160;this&#160;point&#160;in&#160;the&#160;loop&#160;we&#160;know&#160;we&#160;have&#160;created&#160;one&#160;ring&#160;worth&#160;of&#160;points,&#160;so&#160;lets&#160;inc&#160;the&#160;counter</var></comment></line>
<line indent="&#160;"><text>inc&#160;</text><var>$ringCount&#160;=&#160;</var></line>
<line indent="&#160;"></line>
<line indent=""><text>end</text></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>some&#160;things&#160;to&#160;know&#160;about&#160;our&#160;point&#160;arrays.&#160;&#160;The&#160;rings&#160;are&#160;all&#160;in&#160;the&#160;same&#160;arrays,&#160;so&#160;to&#160;access&#160;a&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>particular&#160;ring,&#160;we&#160;need&#160;to&#160;know&#160;the&#160;element&#160;ranges&#160;for&#160;each&#160;ring</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>first&#160;ring&#160;elements&#160;will&#160;be&#160;&#160;&#160;&#160;&#160;[0,&#160;$lasertowersPerRing&#160;-&#160;1]</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>second&#160;ring&#160;elements&#160;will&#160;be&#160;&#160;&#160;&#160;[$lasertowersPerRing,&#160;2*$lasertowersPerRing&#160;-&#160;1]</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>third&#160;ring&#160;elements&#160;will&#160;be&#160;&#160;&#160;&#160;&#160;[2*$lasertowersPerRing,&#160;3*$lasertowersPerRing-1]</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>and&#160;so&#160;on</var></comment></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>thus&#160;far&#160;we&#160;have&#160;generated&#160;our&#160;rings,&#160;but&#160;they&#160;are&#160;indexed&#160;off&#160;the&#160;point&#160;(0,&#160;3000,&#160;0),&#160;and&#160;are&#160;therefore</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>located&#160;somewhere&#160;near&#160;the&#160;origin&#160;of&#160;the&#160;sector.&#160;&#160;We&#160;need&#160;to&#160;transpose&#160;the&#160;ring&#160;coordinates&#160;to&#160;be&#160;</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>centered&#160;on&#160;the&#160;$specifiedHaloPosition</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>to&#160;do&#160;this&#160;we&#160;will&#160;find&#160;the&#160;average&#160;of&#160;all&#160;the&#160;points&#160;in&#160;our&#160;halo&#160;array,&#160;then&#160;take&#160;the&#160;vector&#160;difference</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>between&#160;that&#160;center&#160;and&#160;the&#160;$specifiedHaloPosition&#160;to&#160;get&#160;a&#160;transformation&#160;vector&#160;we&#160;can&#160;then</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>add&#160;to&#160;every&#160;point&#160;in&#160;the&#160;halo&#160;array.&#160;&#160;That&#160;will&#160;give&#160;us&#160;our&#160;final&#160;list&#160;of&#160;points.</var></comment></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>so&#160;lets&#160;find&#160;the&#160;average&#160;point&#160;in&#160;our&#160;halo&#160;array</var></comment></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>the&#160;X&#160;Y&#160;and&#160;Z&#160;halo&#160;point&#160;arrays&#160;should&#160;all&#160;be&#160;the&#160;same&#160;length,&#160;so&#160;any&#160;one&#160;of&#160;them&#160;will&#160;do</var></comment></line>
<line indent=""><var>$haloPointArraySize&#160;=&#160;</var><text>size&#160;of&#160;array&#160;</text><var>$lasertowerX</var></line>
<line indent=""><var>$averagePointCounter&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>while&#160;</var><var>$averagePointCounter</var><text>&#160;</text><var>&lt;</var><text>&#160;</text><var>$haloPointArraySize</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$lasertowerX</var><text>[</text><var>$averagePointCounter</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$lasertowerY</var><text>[</text><var>$averagePointCounter</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$lasertowerZ</var><text>[</text><var>$averagePointCounter</var><text>]</text></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$averageHaloPointX&#160;=&#160;</var><var>$averageHaloPointX</var><text>&#160;</text><var>+</var><text>&#160;</text><var>$lasertowerTempX</var></line>
<line indent="&#160;"><var>$averageHaloPointY&#160;=&#160;</var><var>$averageHaloPointY</var><text>&#160;</text><var>+</var><text>&#160;</text><var>$lasertowerTempY</var></line>
<line indent="&#160;"><var>$averageHaloPointZ&#160;=&#160;</var><var>$averageHaloPointZ</var><text>&#160;</text><var>+</var><text>&#160;</text><var>$lasertowerTempZ</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><text>inc&#160;</text><var>$averagePointCounter&#160;=&#160;</var></line>
<line indent=""><text>end</text></line>
<line indent=""></line>
<line indent=""><var>$averageHaloPointX&#160;=&#160;</var><var>$averageHaloPointX</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$haloPointArraySize</var></line>
<line indent=""><var>$averageHaloPointY&#160;=&#160;</var><var>$averageHaloPointY</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$haloPointArraySize</var></line>
<line indent=""><var>$averageHaloPointZ&#160;=&#160;</var><var>$averageHaloPointZ</var><text>&#160;</text><var>/</var><text>&#160;</text><var>$haloPointArraySize</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>now&#160;that&#160;we&#160;have&#160;the&#160;center&#160;of&#160;the&#160;halo&#160;array,&#160;we&#160;can&#160;create&#160;our&#160;displacement&#160;vector.</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>head&#160;minus&#160;tail!</var></comment></line>
<line indent=""></line>
<line indent=""><var>$finalDisplacementVectorX&#160;=&#160;</var><var>$haloCenterX</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$averageHaloPointX</var></line>
<line indent=""><var>$finalDisplacementVectorY&#160;=&#160;</var><var>$haloCenterY</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$averageHaloPointY</var></line>
<line indent=""><var>$finalDisplacementVectorZ&#160;=&#160;</var><var>$haloCenterZ</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$averageHaloPointZ</var></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>now&#160;that&#160;we&#160;have&#160;our&#160;final&#160;displacement&#160;vector,&#160;we&#160;can&#160;add&#160;this&#160;value&#160;to&#160;each&#160;of&#160;the</var></comment></line>
<line indent=""><comment><text>*&#160;</text><var>points&#160;in&#160;our&#160;$lasertowerXYZ&#160;arrays&#160;to&#160;get&#160;the&#160;final&#160;positions.</var></comment></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><var>$finalDisplacementCounter&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>while&#160;</var><var>$finalDisplacementCounter</var><text>&#160;</text><var>&lt;</var><text>&#160;</text><var>$haloPointArraySize</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$lasertowerX</var><text>[</text><var>$finalDisplacementCounter</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$lasertowerY</var><text>[</text><var>$finalDisplacementCounter</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$lasertowerZ</var><text>[</text><var>$finalDisplacementCounter</var><text>]</text></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$finalDisplacementVectorX</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$lasertowerTempX</var></line>
<line indent="&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$finalDisplacementVectorY</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$lasertowerTempY</var></line>
<line indent="&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$finalDisplacementVectorZ</var><text>&#160;</text><var>-</var><text>&#160;</text><var>$lasertowerTempZ</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$lasertowerX</var><text>[</text><var>$finalDisplacementCounter</var><text>]&#160;=&#160;</text><var>$lasertowerTempX</var></line>
<line indent="&#160;"><var>$lasertowerY</var><text>[</text><var>$finalDisplacementCounter</var><text>]&#160;=&#160;</text><var>$lasertowerTempY</var></line>
<line indent="&#160;"><var>$lasertowerZ</var><text>[</text><var>$finalDisplacementCounter</var><text>]&#160;=&#160;</text><var>$lasertowerTempZ</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><text>inc&#160;</text><var>$finalDisplacementCounter&#160;=&#160;</var></line>
<line indent=""><text>end</text></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><comment><text>*&#160;</text><var>Lets&#160;deploy&#160;some&#160;friggen&#160;&quot;lasers!&quot;</var></comment></line>
<line indent=""></line>
<line indent=""><var>$laserDeploymentCounter&#160;=&#160;</var><var>0</var></line>
<line indent=""><var>while&#160;</var><var>$laserDeploymentCounter</var><text>&#160;</text><var>&lt;</var><text>&#160;</text><var>$haloPointArraySize</var></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$lasertowerTempX&#160;=&#160;</var><var>$lasertowerX</var><text>[</text><var>$laserDeploymentCounter</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempY&#160;=&#160;</var><var>$lasertowerY</var><text>[</text><var>$laserDeploymentCounter</var><text>]</text></line>
<line indent="&#160;"><var>$lasertowerTempZ&#160;=&#160;</var><var>$lasertowerZ</var><text>[</text><var>$laserDeploymentCounter</var><text>]</text></line>
<line indent="&#160;"></line>
<line indent="&#160;"><var>$lazor&#160;=&#160;</var><text>create&#160;ship:&#160;type=</text><var>$lasertowerShip</var><text>&#160;owner=</text><var>Player</var><text>&#160;addto=</text><var>$targetSector</var><text>&#160;x=</text><var>$lasertowerTempX</var><text>&#160;y=</text><var>$lasertowerTempY</var><text>&#160;z=</text><var>$lasertowerTempZ</var></line>
<line indent="&#160;"></line>
<line interruptable="@" indent="&#160;"><var>=&#160;</var><text>wait&#160;</text><var>1000</var><text>&#160;ms</text></line>
<line indent="&#160;"></line>
<line indent="&#160;"><text>inc&#160;</text><var>$laserDeploymentCounter&#160;=&#160;</var></line>
<line indent=""><text>end</text></line>
<line indent=""></line>
<line indent=""></line>
<line indent=""><text>return&#160;</text><var>null</var></line>
</sourcetext>
<codearray>

<sval type="array" size="10">
  <sval type="string" val="Cmd.LasertowerHalo"/>
  <sval type="int" val="54"/>
  <sval type="string" val="Creates a ring of lasertowers about the user's current position, inheriting the user's current orientation"/>
  <sval type="int" val="2"/>
  <sval type="int" val="0"/>
  <sval type="array" size="77">
    <sval type="string" val="quantityLasertowers"/>
    <sval type="string" val="specifiedHaloPosition"/>
    <sval type="string" val="specifiedOrientationVector"/>
    <sval type="string" val="targetSector"/>
    <sval type="string" val="lasertowerShip"/>
    <sval type="string" val="lasertowerWare"/>
    <sval type="string" val="lazor"/>
    <sval type="string" val="haloRadius"/>
    <sval type="string" val="nRings"/>
    <sval type="string" val="lasertowersPerRing"/>
    <sval type="string" val="excessLasertowers"/>
    <sval type="string" val="lasertowerAngularDisplacement"/>
    <sval type="string" val="lasertowerAxisX"/>
    <sval type="string" val="lasertowerAxisY"/>
    <sval type="string" val="lasertowerAxisZ"/>
    <sval type="string" val="lasertowerAxisLengthRadicand"/>
    <sval type="string" val="lasertowerAxisLength"/>
    <sval type="string" val="haloCenterX"/>
    <sval type="string" val="haloCenterY"/>
    <sval type="string" val="haloCenterZ"/>
    <sval type="string" val="haloOrientationX"/>
    <sval type="string" val="haloOrientationY"/>
    <sval type="string" val="haloOrientationZ"/>
    <sval type="string" val="initialLasertowerPointX"/>
    <sval type="string" val="initialLasertowerPointY"/>
    <sval type="string" val="initialLasertowerPointZ"/>
    <sval type="string" val="originPositionArray"/>
    <sval type="string" val="initialPositionArray"/>
    <sval type="string" val="initialPositionLength"/>
    <sval type="string" val="falseAxisVectorX"/>
    <sval type="string" val="falseAxisVectorY"/>
    <sval type="string" val="falseAxisVectorZ"/>
    <sval type="string" val="ringRotationQuaternion"/>
    <sval type="string" val="ringRotationQuaternionInverse"/>
    <sval type="string" val="lasertowerPointQuaternion"/>
    <sval type="string" val="ringRotationQuaternionReal"/>
    <sval type="string" val="ringRotationQuaternionI"/>
    <sval type="string" val="ringRotationQuaternionJ"/>
    <sval type="string" val="ringRotationQuaternionK"/>
    <sval type="string" val="ringInverseRotationQuaternionReal"/>
    <sval type="string" val="ringInverseRotationQuaternionI"/>
    <sval type="string" val="ringInverseRotationQuaternionJ"/>
    <sval type="string" val="ringInverseRotationQuaternionK"/>
    <sval type="string" val="lasertowerDisplacementHalfAngle"/>
    <sval type="string" val="lasertowerHalfAngleCosine"/>
    <sval type="string" val="lasertowerHalfAngleSine"/>
    <sval type="string" val="lasertowerX"/>
    <sval type="string" val="lasertowerY"/>
    <sval type="string" val="lasertowerZ"/>
    <sval type="string" val="lasertowerTempX"/>
    <sval type="string" val="lasertowerTempY"/>
    <sval type="string" val="lasertowerTempZ"/>
    <sval type="string" val="tempReal"/>
    <sval type="string" val="tempI"/>
    <sval type="string" val="tempJ"/>
    <sval type="string" val="tempK"/>
    <sval type="string" val="ringCount"/>
    <sval type="string" val="lasertowerCount"/>
    <sval type="string" val="averagePointCounter"/>
    <sval type="string" val="finalDisplacementCounter"/>
    <sval type="string" val="laserDeploymentCounter"/>
    <sval type="string" val="arrayElement"/>
    <sval type="string" val="lasertowerAxisOffsetX"/>
    <sval type="string" val="lasertowerAxisOffsetY"/>
    <sval type="string" val="lasertowerAxisOffsetZ"/>
    <sval type="string" val="averageHaloPointX"/>
    <sval type="string" val="averageHaloPointY"/>
    <sval type="string" val="averageHaloPointZ"/>
    <sval type="string" val="finalDisplacementVectorX"/>
    <sval type="string" val="finalDisplacementVectorY"/>
    <sval type="string" val="finalDisplacementVectorZ"/>
    <sval type="string" val="lasertowerAxisXShortCopy"/>
    <sval type="string" val="lasertowerAxisYShortCopy"/>
    <sval type="string" val="lasertowerAxisZShortCopy"/>
    <sval type="string" val="qConjugatePart1"/>
    <sval type="string" val="qConjugatePart2"/>
    <sval type="string" val="haloPointArraySize"/>
  </sval>
  <sval type="array" size="221">
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="9"/>
      <sval type="int" val="459025"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="5"/>
      <sval type="int" val="1"/>
      <sval type="int" val="9"/>
      <sval type="int" val="1048585"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="6"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="7"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="8"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="9"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="10"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="11"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="12"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="13"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="14"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="15"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="16"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="17"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="18"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="19"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="20"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="2"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="21"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="2"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="22"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="2"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="23"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="24"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="25"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="26"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="27"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="26"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="26"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="26"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="28"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="29"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="30"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="31"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="32"/>
      <sval type="int" val="4"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="33"/>
      <sval type="int" val="4"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="35"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="36"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="37"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="38"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="39"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="40"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="41"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="42"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="43"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="44"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="45"/>
      <sval type="int" val="1"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="46"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="47"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="128"/>
      <sval type="int" val="48"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="49"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="50"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="51"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="52"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="53"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="54"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="55"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="56"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="57"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="58"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="59"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="60"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="61"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="62"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="63"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="64"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="65"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="66"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="67"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="68"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="69"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="70"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="7"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3000"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="27">
      <sval type="int" val="104"/>
      <sval type="int" val="8"/>
      <sval type="int" val="7"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="0"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="4"/>
      <sval type="int" val="150"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="15"/>
      <sval type="int" val="11"/>
      <sval type="int" val="9"/>
      <sval type="int" val="16"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="17"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
      <sval type="int" val="11"/>
      <sval type="int" val="-6"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="9"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="0"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="8"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="10"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="0"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="9"/>
      <sval type="int" val="15"/>
      <sval type="int" val="15"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="15"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="11"/>
      <sval type="int" val="3"/>
      <sval type="int" val="4"/>
      <sval type="int" val="65536"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="9"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="43"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="11"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="20"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="17"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="13"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="21"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="18"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="22"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="19"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="402"/>
      <sval type="int" val="5"/>
      <sval type="string" val="the number of rings  = %s and the angular displacement = %s"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="8"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="11"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="798"/>
      <sval type="int" val="16"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="12"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="12"/>
      <sval type="int" val="4"/>
      <sval type="int" val="10000"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="13"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="13"/>
      <sval type="int" val="4"/>
      <sval type="int" val="10000"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="14"/>
      <sval type="int" val="4"/>
      <sval type="int" val="10000"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="16"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="10000"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="402"/>
      <sval type="int" val="5"/>
      <sval type="string" val="axis x= %s y= %s z= %s"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="12"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="14"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="1051"/>
      <sval type="int" val="44"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="43"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="1050"/>
      <sval type="int" val="45"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="43"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="35"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="44"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="4"/>
      <sval type="int" val="65536"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="36"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="12"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="45"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="4"/>
      <sval type="int" val="65536"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="37"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="45"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="4"/>
      <sval type="int" val="65536"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="38"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="14"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="45"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="4"/>
      <sval type="int" val="65536"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="32"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="35"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="32"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="36"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="32"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="37"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="32"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="38"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="39"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="35"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="10">
      <sval type="int" val="104"/>
      <sval type="int" val="40"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="36"/>
      <sval type="int" val="15"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="2"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="10">
      <sval type="int" val="104"/>
      <sval type="int" val="41"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="37"/>
      <sval type="int" val="15"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="2"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="10">
      <sval type="int" val="104"/>
      <sval type="int" val="42"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="38"/>
      <sval type="int" val="15"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="2"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="33"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="39"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="33"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="40"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="33"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="41"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="33"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="42"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="402"/>
      <sval type="int" val="5"/>
      <sval type="string" val="rot quaternion = %s and inverse is =%s"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="32"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="33"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="62"/>
      <sval type="int" val="5"/>
      <sval type="int" val="4"/>
      <sval type="int" val="125"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="12"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="63"/>
      <sval type="int" val="5"/>
      <sval type="int" val="4"/>
      <sval type="int" val="125"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="13"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="64"/>
      <sval type="int" val="5"/>
      <sval type="int" val="4"/>
      <sval type="int" val="125"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="14"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="71"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="12"/>
      <sval type="int" val="4"/>
      <sval type="int" val="100"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="72"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="13"/>
      <sval type="int" val="4"/>
      <sval type="int" val="100"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="73"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="14"/>
      <sval type="int" val="4"/>
      <sval type="int" val="100"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="29"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="73"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="10">
      <sval type="int" val="104"/>
      <sval type="int" val="30"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="71"/>
      <sval type="int" val="15"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="2"/>
      <sval type="int" val="65555"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="31"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="72"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="25">
      <sval type="int" val="104"/>
      <sval type="int" val="23"/>
      <sval type="int" val="7"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="72"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="31"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="73"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="30"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="7"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-4"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-5"/>
    </sval>
    <sval type="array" size="25">
      <sval type="int" val="104"/>
      <sval type="int" val="24"/>
      <sval type="int" val="7"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="73"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="29"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="71"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="31"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="7"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-4"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-5"/>
    </sval>
    <sval type="array" size="25">
      <sval type="int" val="104"/>
      <sval type="int" val="25"/>
      <sval type="int" val="7"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="71"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="30"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="72"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="29"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="7"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-4"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-5"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="27"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="23"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="27"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="24"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="27"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="25"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="798"/>
      <sval type="int" val="28"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="26"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="27"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="23"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="23"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="7"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="28"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="24"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="24"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="7"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="28"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="19">
      <sval type="int" val="104"/>
      <sval type="int" val="25"/>
      <sval type="int" val="5"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="25"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="7"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="28"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="5"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-4"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="23"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="24"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="25"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="402"/>
      <sval type="int" val="5"/>
      <sval type="string" val="initial pont x = %s y=%s z = %s"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="23"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="24"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="25"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="23"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="24"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="25"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="57"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="9"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="-1610570999"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="57"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="10">
      <sval type="int" val="102"/>
      <sval type="string" val="Lib.Math.HamiltonProduct"/>
      <sval type="int" val="74"/>
      <sval type="int" val="131075"/>
      <sval type="int" val="1"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="32"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="52"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="53"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="54"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="55"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="52"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="52"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="53"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="53"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="54"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="54"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="55"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="55"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="52"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="53"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="54"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="55"/>
    </sval>
    <sval type="array" size="10">
      <sval type="int" val="102"/>
      <sval type="string" val="Lib.Math.HamiltonProduct"/>
      <sval type="int" val="75"/>
      <sval type="int" val="131075"/>
      <sval type="int" val="1"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="74"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="33"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="75"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="49"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="75"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="50"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="51"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="75"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="51"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="16"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="2"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="34"/>
      <sval type="int" val="4"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="143"/>
      <sval type="int" val="57"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="112"/>
      <sval type="int" val="134"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="56"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="-1610566391"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="56"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="8"/>
      <sval type="int" val="15"/>
      <sval type="int" val="3"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="57"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="-1610566903"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="57"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="9"/>
      <sval type="int" val="15"/>
      <sval type="int" val="3"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="61"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="56"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="57"/>
      <sval type="int" val="15"/>
      <sval type="int" val="13"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="13"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="61"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="61"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="51"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="61"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="49"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="62"/>
      <sval type="int" val="15"/>
      <sval type="int" val="11"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="11"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="50"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="63"/>
      <sval type="int" val="15"/>
      <sval type="int" val="11"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="11"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="51"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="64"/>
      <sval type="int" val="15"/>
      <sval type="int" val="11"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="11"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
    </sval>
    <sval type="array" size="5">
      <sval type="int" val="135"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="142"/>
      <sval type="int" val="57"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="112"/>
      <sval type="int" val="166"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="142"/>
      <sval type="int" val="56"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="112"/>
      <sval type="int" val="164"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="131"/>
      <sval type="int" val="76"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="58"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="-1610563575"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="58"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="76"/>
      <sval type="int" val="15"/>
      <sval type="int" val="3"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="58"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="58"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="51"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="58"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="65"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="65"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
      <sval type="int" val="15"/>
      <sval type="int" val="11"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="11"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="66"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="66"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
      <sval type="int" val="15"/>
      <sval type="int" val="11"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="11"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="67"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="67"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
      <sval type="int" val="15"/>
      <sval type="int" val="11"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="11"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="142"/>
      <sval type="int" val="58"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="112"/>
      <sval type="int" val="183"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="65"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="65"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="76"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="66"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="66"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="76"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="67"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="67"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="76"/>
      <sval type="int" val="15"/>
      <sval type="int" val="14"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="14"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="68"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="17"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="65"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="69"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="18"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="66"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="70"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="19"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="67"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="59"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="-1610558711"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="59"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="76"/>
      <sval type="int" val="15"/>
      <sval type="int" val="3"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="59"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="59"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="51"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="59"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="49"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="68"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="50"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="69"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="51"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="70"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
      <sval type="int" val="15"/>
      <sval type="int" val="12"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="12"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="59"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="59"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="130"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="59"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="142"/>
      <sval type="int" val="59"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="112"/>
      <sval type="int" val="199"/>
    </sval>
    <sval type="array" size="7">
      <sval type="int" val="104"/>
      <sval type="int" val="60"/>
      <sval type="int" val="1"/>
      <sval type="int" val="4"/>
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="int" val="-1"/>
    </sval>
    <sval type="array" size="13">
      <sval type="int" val="104"/>
      <sval type="int" val="-1610556407"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="60"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="76"/>
      <sval type="int" val="15"/>
      <sval type="int" val="3"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-1"/>
      <sval type="int" val="3"/>
      <sval type="int" val="-2"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="46"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="60"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="47"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="60"/>
    </sval>
    <sval type="array" size="6">
      <sval type="int" val="129"/>
      <sval type="int" val="51"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="48"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="60"/>
    </sval>
    <sval type="array" size="14">
      <sval type="int" val="739"/>
      <sval type="int" val="6"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="4"/>
      <sval type="int" val="10"/>
      <sval type="int" val="10"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="3"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="49"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="50"/>
      <sval type="int" val="131074"/>
      <sval type="int" val="51"/>
    </sval>
    <sval type="array" size="4">
      <sval type="int" val="105"/>
      <sval type="int" val="-2147483647"/>
      <sval type="int" val="4"/>
      <sval type="int" val="1000"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="142"/>
      <sval type="int" val="60"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="112"/>
      <sval type="int" val="212"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="103"/>
      <sval type="int" val="0"/>
      <sval type="int" val="0"/>
    </sval>
  </sval>
  <sval type="array" size="3">
    <sval type="array" size="2">
      <sval type="int" val="3"/>
      <sval type="string" val="number of lasertowers"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="52"/>
      <sval type="string" val="Position of Rings"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="52"/>
      <sval type="string" val="Aim the rings at this point"/>
    </sval>
  </sval>
  <sval type="array" size="263">
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="************************************************"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="SCRIPT NAME: Lasertower Halo"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="DESCRIPTION: Creates multiple rings of lasertowers about a given position and orientation"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val=""/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="AUTHOR: Attheveryend           DATE: 25 August 2020"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="************************************************"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="variable declarations"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="0"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we will need to know what sector to deploy our halo array to.  the 4th element of the "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="0"/>
      <sval type="int" val="1"/>
      <sval type="string" val="sector position array is the chosen sector."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="1"/>
      <sval type="int" val="1"/>
      <sval type="string" val="lets get some vars for our lasertower ship and ware"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="3"/>
      <sval type="int" val="1"/>
      <sval type="string" val="when we finally create lasertowers in the universe, the var to hold a reference to each laser obj"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="3"/>
      <sval type="int" val="1"/>
      <sval type="string" val="will be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="4"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the radius of the halo will be"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="5"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the number of rings I shall need to make will be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="6"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the number of lasertowers I will sort into each ring shall be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="7"/>
      <sval type="int" val="1"/>
      <sval type="string" val="in case the $quantityLasertowers is not divisible by $nRings, we'll keep track of the extra LTs here:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="8"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the angle between each lasertower in a ring will be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="8"/>
      <sval type="int" val="1"/>
      <sval type="string" val="also recall that there are 65536 degrees in a circle"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="9"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the vector parallel to the ring axis shall be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="12"/>
      <sval type="int" val="1"/>
      <sval type="string" val="this variable is used in computing the length of the lasertower axis vector:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="13"/>
      <sval type="int" val="1"/>
      <sval type="string" val="let the length of the lasertower axis vector be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="14"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the elements of $specifiedHaloPosition array shall be"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="17"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the elements of the $specifiedOrientationVector array shall be"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="20"/>
      <sval type="int" val="1"/>
      <sval type="string" val="let the first lasertower point, which will be used to generate all the other lasertower positions be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="23"/>
      <sval type="int" val="1"/>
      <sval type="string" val="I will need position arrays for working with the built in distance function."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="25"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the origin position array is just an array of zeroes"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="28"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the length of my initial point vector for use with normalizing it will be"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="29"/>
      <sval type="int" val="1"/>
      <sval type="string" val="a vector needed to aid in the creation of a valid initial lasertower point is"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="32"/>
      <sval type="int" val="1"/>
      <sval type="string" val="let the rotation quaternion that generates the points of the lasertower ring, and its inverse be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="32"/>
      <sval type="int" val="1"/>
      <sval type="string" val="elements are in order: 0 = real, 1 = i, 2 = j, 3 = k"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="34"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we will need to embed the lasertower position coordinates into a size 4 quaternion array too so:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="35"/>
      <sval type="int" val="1"/>
      <sval type="string" val="because we're not allowed to evaluate any math while assigning to an array element"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="35"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we will need some vars to calculate each quaternion array element's value:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="43"/>
      <sval type="int" val="1"/>
      <sval type="string" val="our quaternions need the sines and cosines of the lasertower half angle, and"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="43"/>
      <sval type="int" val="1"/>
      <sval type="string" val="that can't be evaluated in the same expression as the cosine and sine, so:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="44"/>
      <sval type="int" val="1"/>
      <sval type="string" val="likewise we will need some vars to hold the LT displacement half angle's sine and cosine"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="46"/>
      <sval type="int" val="1"/>
      <sval type="string" val="let my lasertower X Y and Z coordinates be held in the arrays:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="49"/>
      <sval type="int" val="1"/>
      <sval type="string" val="for the purpose of working on individual elements of the lasertowerXYZ arrays:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="56"/>
      <sval type="int" val="1"/>
      <sval type="string" val="I need some loop counters"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="61"/>
      <sval type="int" val="1"/>
      <sval type="string" val="in a two dimensional loop, one needs a temporary var to store a compound array access number"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="62"/>
      <sval type="int" val="1"/>
      <sval type="string" val="in order to shift our rings along our ring axis as we generate them, it will be handy to have some"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="62"/>
      <sval type="int" val="1"/>
      <sval type="string" val="vars to store the lasertower axis vector as a scalable offset."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="65"/>
      <sval type="int" val="1"/>
      <sval type="string" val="let the average (i.e. center) point of our halo array be:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="68"/>
      <sval type="int" val="1"/>
      <sval type="string" val="Once we generate our set of lasertower position points, we will want to shift those points over"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="68"/>
      <sval type="int" val="1"/>
      <sval type="string" val="to their final resting position.  The vector to do that will be:"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="71"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="71"/>
      <sval type="int" val="1"/>
      <sval type="string" val="this script does the following, in order:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="71"/>
      <sval type="int" val="1"/>
      <sval type="string" val=" "/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="71"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="71"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="71"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="71"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="71"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="71"/>
      <sval type="int" val="1"/>
      <sval type="string" val="from the RoF script we know the lasertowers misbehave and bump each other if they are closer "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="71"/>
      <sval type="int" val="1"/>
      <sval type="string" val="together than 110m.  While the RoF script solves this by running a script on each lasertower to "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="71"/>
      <sval type="int" val="1"/>
      <sval type="string" val="recover their original position every few minutes, I would like to avoid additional overhead."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="71"/>
      <sval type="int" val="1"/>
      <sval type="string" val="Therefore I will adhere to a minimum spacing of 125m, and create additional rings of "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="71"/>
      <sval type="int" val="1"/>
      <sval type="string" val="lasertowers as needed to form a cylinder."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="71"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="72"/>
      <sval type="int" val="1"/>
      <sval type="string" val="If I choose to only make rings of radius 3000m, then each ring can hold at most 150 lasertowers "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="72"/>
      <sval type="int" val="1"/>
      <sval type="string" val="and still have that 125m spacing. Therefore the number of rings I will need to sort my lasertowers"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="72"/>
      <sval type="int" val="1"/>
      <sval type="string" val="into for a given $quantityLasertowers is"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="73"/>
      <sval type="int" val="1"/>
      <sval type="string" val="This works because x3 scripts do integer division and outright truncate values at the decimal point."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="73"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the $quantityLasertowers - 1 ensures that if I ask for 150 towers, I still get one ring."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="73"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="73"/>
      <sval type="int" val="1"/>
      <sval type="string" val="We can now calculate the number of lasertowers we will sort into each ring.  "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="73"/>
      <sval type="int" val="1"/>
      <sval type="string" val="even if there's only one ring we should still do this so we can unify the methods to get"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="73"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the $lasertowerAngularDisplacement between different numbers of rings."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="74"/>
      <sval type="int" val="1"/>
      <sval type="string" val="again, integer divison, so there will be cases where "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="74"/>
      <sval type="int" val="1"/>
      <sval type="string" val="   $nRings * $lasertowersPerRing &lt; $quantityLasertowers"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="74"/>
      <sval type="int" val="1"/>
      <sval type="string" val="to account for this, we should calculate the excess lasertowers, which may be zero."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="75"/>
      <sval type="int" val="1"/>
      <sval type="string" val="as for what to do with these excesss bois, there will only ever be &lt; $nRings of them"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="75"/>
      <sval type="int" val="1"/>
      <sval type="string" val="I might just stick them in their own sad little ring in the end.  Or maybe not use them."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="75"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="75"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the angle between one lasertower and the next in each ring is then:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="76"/>
      <sval type="int" val="1"/>
      <sval type="string" val="now we have our rotation angle.  Lets take this time to also calculate the half angle"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="77"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the next thing on the laundry list on our way to generating a circle of points is to find the "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="77"/>
      <sval type="int" val="1"/>
      <sval type="string" val="lasertower axis."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="77"/>
      <sval type="int" val="1"/>
      <sval type="string" val="to get the lasertower axis, I need only take the difference between the $specifiedHaloPosition vector "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="77"/>
      <sval type="int" val="1"/>
      <sval type="string" val="and $specifiedOrientationVector."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="77"/>
      <sval type="int" val="1"/>
      <sval type="string" val="since these are arrays, and the MSCI hates us for trying to assign array elements directly to other "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="77"/>
      <sval type="int" val="1"/>
      <sval type="string" val="array's elements....I will need to do the subtraction element-wise.  Head minus tail:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="80"/>
      <sval type="int" val="1"/>
      <sval type="string" val="with this axis vector I now have a vector normal to the plane of my intended ring of lasertowers.  "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="80"/>
      <sval type="int" val="1"/>
      <sval type="string" val="Now I can set about the task of using this normal vector to generate a set of points which will form"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="80"/>
      <sval type="int" val="1"/>
      <sval type="string" val="a ring parallell to my final ring."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="80"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="81"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="81"/>
      <sval type="int" val="1"/>
      <sval type="string" val="**************Quaternion Rotation*************************"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="81"/>
      <sval type="int" val="1"/>
      <sval type="string" val="a quaternion q is a rotation of angle th about unit vector U=&lt;ux, uy, yz&gt; if:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="81"/>
      <sval type="int" val="1"/>
      <sval type="string" val="        q = cos(th/2) + ( ux*i + uy*j + uz*k)*sin(th/2)"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="81"/>
      <sval type="int" val="1"/>
      <sval type="string" val="our lasertowerAxis needs to be normalized to length 1 in order to become a suitable unit vector"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="81"/>
      <sval type="int" val="1"/>
      <sval type="string" val="to normalize it, i first need to know its current length via L = sqrt( x^2 + y^2 + z^2), and then"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="81"/>
      <sval type="int" val="1"/>
      <sval type="string" val="I can divide out the length from each element of the lasertower axis vector to normalize it."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="82"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="82"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we need some code to avoid some overflows from the lasertower axis vector being too big."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="82"/>
      <sval type="int" val="1"/>
      <sval type="string" val="lets normalize the axis vector to be length 1000m"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="85"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="86"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="86"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="87"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="so now the issue is:  how do we remember unit vectors whose elements are all values less than "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="one, but we cannot remember values that are not integers????  "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we'll need to make 1 = 10000000 or something."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="actually no we can delay the use of values less than one by multiplying both sides of the"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="definition of the quaternion vector by the length of the lasertower axis vector."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="       ||LTAxis||*q = ||LTAxis||*cos(th/2)  + (LTAx*i + LTAy*j + LTAz*k)*sin(th/2)"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we can do this because the length is a scalar quanity, and it helps because now all the"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="numbers in the above equations are still integers.  "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="there will also be some tomfoolery regarding the cosines because 2PI = 65536 here. and"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the fixedCos function gives results between -65536 and 65536.  So that'll be fun too."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="87"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="87"/>
      <sval type="int" val="1"/>
      <sval type="string" val="lets calculate cos(th/2) and sin(th/2)"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="89"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="89"/>
      <sval type="int" val="1"/>
      <sval type="string" val="as we assign this we still need to normalize our sines and cosines, so we divide by 65536"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="93"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="97"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="97"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we can now create the inverse of our rotation quaternion, which for our &quot;unit&quot; quaternion is simply"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="97"/>
      <sval type="int" val="1"/>
      <sval type="string" val="a change of sign on the imaginary vector elements"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="101"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="101"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="105"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="106"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="106"/>
      <sval type="int" val="1"/>
      <sval type="string" val="it is time to set our lasertower axis offset vectors"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="109"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="I need to generate the first point.  I need a point with perpendicular distance = halo radius"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="away from our lasertower axis relative to the origin.  The way we will achieve this is to "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="construct a second vector by rearranging elements from our axis vector such that this"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="second vector is anything but parallel to the axis.  Then we will take the cross product"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="of that vector with the axis vector to generate a vector that is normal to our axis."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="if we normalize that normal vector to length = halo radius, it will serve as a first point."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="109"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="it seems I need to juggle a few different legths of lasertower axis vectors.  The rotation"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="quaternions do not like small axis vectors, and the initial point does not like long"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="109"/>
      <sval type="int" val="1"/>
      <sval type="string" val="axis vectors.  So here we shall make a copy of the axis and shorten it for use here."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="109"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="112"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="112"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the following scheme will work so long as our axis vector isn't length zero, which would be"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="112"/>
      <sval type="int" val="1"/>
      <sval type="string" val="an issue in other areas as well."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="115"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="118"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="121"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="121"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="122"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="122"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="125"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="125"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we have our first point, lets add it to the lasertower point array"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="128"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="129"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="**************LOOOPABLE CONTENT YO***********************************"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="what I wouldn't give for a FOR loop."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="I need a 2D loop.  One dimension for the number of rings I'm to build and one dimension"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="for the number of lasertowers in each ring."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the first time through I will build 1 ring about the given center position"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the For the second ring I need to add an offset to each point in the direction of the lasertower"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="axis.  we can do that by adding a multiple of the lasertower axis vector to each point."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="subsequent rings need increasingly greater offsets."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="I need to figure out a way to center the offsets intelligently so that the whole halo array is centered"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="on the $specifiedHaloPosition"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="129"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="129"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="129"/>
      <sval type="int" val="1"/>
      <sval type="string" val="now lets embed our first lasertower point from which the rest of the ring will be generated"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="133"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="133"/>
      <sval type="int" val="1"/>
      <sval type="string" val="in this loop I want to generate the first ring's points."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="133"/>
      <sval type="int" val="1"/>
      <sval type="string" val="lets initialize the lasertower counter.  Recall we already have one point, so start the count less one."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="135"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="135"/>
      <sval type="int" val="1"/>
      <sval type="string" val="in order to perform a quaternion rotation p' =  q*p*q^-1, first we have to modify the equation to"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="135"/>
      <sval type="int" val="1"/>
      <sval type="string" val="account for the $lasertowerAxisLength factor.  It then becomes:"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="135"/>
      <sval type="int" val="1"/>
      <sval type="string" val="        ||LTAxis||^2*p' = ||LTAxis||^2*q*p*q^-1 "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="135"/>
      <sval type="int" val="1"/>
      <sval type="string" val="so to recover p', the rotated point, we will need to divide out $lasertowerAxisLength^2 later."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="135"/>
      <sval type="int" val="1"/>
      <sval type="string" val="We have a hamilton product script that takes two args q1 and q2, so we will need to perform our "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="135"/>
      <sval type="int" val="1"/>
      <sval type="string" val="conjugation in two steps.  "/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="136"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="140"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="144"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="148"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="149"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="149"/>
      <sval type="int" val="1"/>
      <sval type="string" val="now that our conjugation op is complete, we can now divide out the axis length squared from each"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="149"/>
      <sval type="int" val="1"/>
      <sval type="string" val="point, which is equal to  the var $lasertowerAxisLengthRadicand.  "/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="155"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="155"/>
      <sval type="int" val="1"/>
      <sval type="string" val="We have now generated one point. lets append our point to our point arrays"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="158"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="158"/>
      <sval type="int" val="1"/>
      <sval type="string" val="and in preparation for the next loop operation, lets embed our new point into the point "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="158"/>
      <sval type="int" val="1"/>
      <sval type="string" val="quaternion so that the next rotation will generate the next point instead of the same point."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="161"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="161"/>
      <sval type="int" val="1"/>
      <sval type="string" val="at this point we know we have created a point for one lasertower, so lets dec the counter"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="162"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="163"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="163"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="163"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="163"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="163"/>
      <sval type="int" val="1"/>
      <sval type="string" val="now that we have the first ring, lets use this set of points to construct further rings via offsets."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="163"/>
      <sval type="int" val="1"/>
      <sval type="string" val="we have one ring completed so lets set the ring count to one."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="163"/>
      <sval type="int" val="1"/>
      <sval type="string" val="also, in the case that $nRings = 1, this loop will not execute, so no need for an IF wrapper."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="165"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="165"/>
      <sval type="int" val="1"/>
      <sval type="string" val="this is a two dimensional operation, so we will need a second loop."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="165"/>
      <sval type="int" val="1"/>
      <sval type="string" val="since we're using this counter to access an array element, it must start with zero and always"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="165"/>
      <sval type="int" val="1"/>
      <sval type="string" val="be smaller than the array we're accessing"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="167"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="168"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="171"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="171"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="174"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="174"/>
      <sval type="int" val="1"/>
      <sval type="string" val="since this operation extends the array, the next time we increment the ring counter, we"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="174"/>
      <sval type="int" val="1"/>
      <sval type="string" val="can be sure that the array will be one multiple of lasertowersPerRing longer"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="177"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="177"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="177"/>
      <sval type="int" val="1"/>
      <sval type="string" val="at this point we know we have created a point for one lasertower, so lets inc the counter"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="178"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="179"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="179"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="179"/>
      <sval type="int" val="1"/>
      <sval type="string" val="at this point in the loop we know we have created one ring worth of points, so lets inc the counter"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="180"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="181"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="181"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="some things to know about our point arrays.  The rings are all in the same arrays, so to access a "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="particular ring, we need to know the element ranges for each ring"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="first ring elements will be     [0, $lasertowersPerRing - 1]"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="second ring elements will be    [$lasertowersPerRing, 2*$lasertowersPerRing - 1]"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="third ring elements will be     [2*$lasertowersPerRing, 3*$lasertowersPerRing-1]"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="and so on"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="181"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="thus far we have generated our rings, but they are indexed off the point (0, 3000, 0), and are therefore"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="located somewhere near the origin of the sector.  We need to transpose the ring coordinates to be "/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="centered on the $specifiedHaloPosition"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="to do this we will find the average of all the points in our halo array, then take the vector difference"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="between that center and the $specifiedHaloPosition to get a transformation vector we can then"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="add to every point in the halo array.  That will give us our final list of points."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="181"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="181"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="so lets find the average point in our halo array"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="181"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="181"/>
      <sval type="int" val="1"/>
      <sval type="string" val="the X Y and Z halo point arrays should all be the same length, so any one of them will do"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="184"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="187"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="190"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="192"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="192"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="195"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="195"/>
      <sval type="int" val="1"/>
      <sval type="string" val="now that we have the center of the halo array, we can create our displacement vector."/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="195"/>
      <sval type="int" val="1"/>
      <sval type="string" val="head minus tail!"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="195"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="198"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="198"/>
      <sval type="int" val="1"/>
      <sval type="string" val="now that we have our final displacement vector, we can add this value to each of the"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="198"/>
      <sval type="int" val="1"/>
      <sval type="string" val="points in our $lasertowerXYZ arrays to get the final positions."/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="198"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="198"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="200"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="203"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="206"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="209"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="211"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="211"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="211"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="3">
      <sval type="int" val="211"/>
      <sval type="int" val="1"/>
      <sval type="string" val="Lets deploy some friggen &quot;lasers!&quot;"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="211"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="213"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="216"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="217"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="218"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="220"/>
      <sval type="int" val="4"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="220"/>
      <sval type="int" val="2"/>
    </sval>
    <sval type="array" size="2">
      <sval type="int" val="220"/>
      <sval type="int" val="2"/>
    </sval>
  </sval>
  <sval type="int" val="0"/>
</sval>

</codearray>
<nosignature>2380</nosignature>
</script>
